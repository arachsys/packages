require libffi
require python

prepare() {
  unpack llvm-project-12.0.0-rc4.tar.gz \
    https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-12.0.0-rc4.tar.gz
  unpack -d cmake \
    https://github.com/Kitware/CMake/releases/download/v3.19.6/cmake-3.19.6.tar.gz
  apply distro.patch
  apply paths.patch
  apply prune.patch
  apply sanitizer.patch
  apply tools.patch
  tree 58a1eaded2c4e9a0a861543856371bae702eea0d257ecd676a289663afd76da0
}

build() {
  cd $SRC/cmake
  $PWD/bootstrap --prefix= --datadir=lib/cmake --docdir=lib/doc/cmake \
    --mandir=lib/man --xdgdatadir=lib --parallel=$((1 + $(nproc))) \
    --system-{bzip2,curl,libarchive,liblzma,zlib,zstd} -- \
    -DCMAKE_SYSTEM_INCLUDE_PATH=/lib/include \
    -DCMAKE_SYSTEM_LIBRARY_PATH="/lib/shared;/lib/static"
  make

  mkdir -p $SRC/build-libunwind
  cd $SRC/build-libunwind
  $SRC/cmake/bin/cmake -W no-dev \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/ \
    -DCMAKE_SKIP_INSTALL_RPATH=Yes \
    -DLLVM_HOST_TRIPLE=$CHOST \
    -DLLVM_TARGETS_TO_BUILD="Native" \
    -DLIBUNWIND_USE_COMPILER_RT=Yes \
    ../libunwind
  make install DESTDIR=$DST

  mkdir -p $SRC/build-libcxxabi
  cd $SRC/build-libcxxabi
  $SRC/cmake/bin/cmake -W no-dev \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/ \
    -DCMAKE_SHARED_LINKER_FLAGS=-L$DST/lib \
    -DCMAKE_SKIP_INSTALL_RPATH=Yes \
    -DLIBCXXABI_USE_COMPILER_RT=Yes \
    -DLIBCXXABI_USE_LLVM_UNWINDER=Yes \
    ../libcxxabi
  make install DESTDIR=$DST

  mkdir -p $SRC/build-libcxx
  cd $SRC/build-libcxx
  $SRC/cmake/bin/cmake -W no-dev \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/ \
    -DCMAKE_SHARED_LINKER_FLAGS=-L$DST/lib \
    -DCMAKE_SKIP_INSTALL_RPATH=Yes \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_CXX_ABI_INCLUDE_PATHS=../libcxxabi/include \
    -DLIBCXX_HAS_ATOMIC_LIB=No \
    -DLIBCXX_HAS_MUSL_LIBC=Yes \
    -DLIBCXX_USE_COMPILER_RT=Yes \
    -DLIBCXXABI_USE_LLVM_UNWINDER=Yes \
    ../libcxx
  make install DESTDIR=$DST

  mkdir -p $SRC/build-llvm
  cd $SRC/build-llvm
  $SRC/cmake/bin/cmake -W no-dev \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/ \
    -DCMAKE_SHARED_LINKER_FLAGS=-L$DST/lib \
    -DCMAKE_SKIP_INSTALL_RPATH=Yes \
    -DLLVM_ENABLE_PROJECTS="compiler-rt;polly;clang;lld" \
    -DLLVM_HOST_TRIPLE=$CHOST \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=Yes \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=Yes \
    -DLLVM_TARGETS_TO_BUILD="Native;BPF;WebAssembly" \
    -DLIBCXX_HAS_MUSL_LIBC=Yes \
    -DSANITIZER_COMMON_LINK_LIBS="c++abi;unwind" \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_INSTALL_SCAN{BUILD,VIEW}=No \
    -DCLANG_LINKS_TO_CREATE="c++;cc;clang++;clang-cl;clang-cpp;cpp" \
    -DLLD_SYMLINKS_TO_CREATE="ld;wasm-ld" \
    $(enabled lto && echo -DLLVM_ENABLE_LTO=Thin) \
    ../llvm
  make install DESTDIR=$DST

  LLVMDIR=$DST/lib/llvm/$(bin/llvm-config --version)
  mkdir -p $LLVMDIR/bin $LLVMDIR/include $LLVMDIR/lib
  cp bin/llvm-config $LLVMDIR/bin/
  cp $(bin/llvm-config --libfiles) $LLVMDIR/lib/
  cp -R include/llvm ../llvm/include/{llvm,llvm-c} $LLVMDIR/include/
  find $LLVMDIR/include -type d -or -name '*.def' -or -name '*.h' \
    -or -name '*.inc' -or -name '*.td' -or -delete
  rm -f -r $LLVMDIR/include/**/{CMakeFiles,config.h}

  rm -f -r $DST/include/{clang-c,llvm-c}
  rm -f -r $DST/lib/{cmake,libclang.so*,libLTO.so*,libRemarks.so*,LLVMPolly.so*}
  mv $DST/include $DST/lib/include
}
