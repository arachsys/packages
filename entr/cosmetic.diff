diff --git a/entr.c b/entr.c
index a43a2f3..743cce5 100644
--- a/entr.c
+++ b/entr.c
@@ -164,14 +164,14 @@ main(int argc, char *argv[]) {
 	shell = getenv("SHELL");
 	shell_base = strdup(shell);
 	if (shell_base == NULL)
-		err(1, "cannot duplicate string");
+		err(1, "Cannot duplicate string");
 	shell_base = basename(shell_base);
 
 	/* sequential scan may depend on a 0 at the end */
 	files = calloc(open_max+1, sizeof(WatchFile *));
 
 	if ((kq = kqueue()) == -1)
-		err(1, "cannot create kqueue");
+		err(1, "Cannot create kqueue");
 
 	/* expect file list from a pipe */
 	if (isatty(fileno(stdin)))
@@ -182,9 +182,7 @@ main(int argc, char *argv[]) {
 	if (n_files == 0)
 		errx(1, "No regular files to watch");
 	if (n_files == -1)
-		errx(1, "Too many files listed; the hard limit for your login"
-		    " class is %u. Please consult"
-		    " http://eradman.com/entrproject/limits.html", open_max);
+		errx(1, "Too many files listed: the hard limit is %u", open_max);
 	for (i=0; i<n_files; i++)
 		watch_file(kq, files[i]);
 
@@ -193,18 +191,18 @@ main(int argc, char *argv[]) {
 		ttyfd = open(_PATH_TTY, O_RDONLY);
 		if (ttyfd > STDIN_FILENO) {
 			if (dup2(ttyfd, STDIN_FILENO) != 0)
-				warnx("can't dup2 to stdin");
+				warnx("Cannot dup2 to stdin");
 			close(ttyfd);
 		}
 
 		/* remember terminal settings */
 		if (tcgetattr(STDIN_FILENO, &canonical_tty) == -1)
-			errx(1, "unable to get terminal attributes, use '-n' to run non-interactively");
+			errx(1, "Unable to get terminal attributes; use -n to run non-interactively");
 
 		/* Use keyboard input as a trigger */
 		EV_SET(&evSet, STDIN_FILENO, EVFILT_READ, EV_ADD, NOTE_LOWAT, 1, NULL);
 		if (kevent(kq, &evSet, 1, NULL, 0, NULL) == -1)
-			warnx("failed to register stdin");
+			warnx("Failed to register stdin");
 	}
 
 	watch_loop(kq, argv+argv_index);
@@ -215,9 +213,25 @@ main(int argc, char *argv[]) {
 
 void
 usage() {
-	fprintf(stderr, "release: %s\n", RELEASE);
-	fprintf(stderr, "usage: entr [-acdnprsz] utility [argument [/_] ...] < filenames\n");
-	exit(1);
+	fprintf(stderr, "\
+Usage: entr [OPT]... CMD [ARG]... < FILENAMES\n\
+Run CMD when any of the files listed on stdin change.\n\
+Options:\n\
+  -a  do not consolidate events received while CMD is running\n\
+  -c  clear screen before running CMD; erase scrollback if used twice\n\
+  -d  exit if new files are added to the directories of listed files,\n\
+        ignoring files with names beginning '.' unless -d given twice\n\
+  -n  do not attempt to read from the TTY or change its properties\n\
+  -p  postpone the first execution of CMD until a file is modified\n\
+  -r  kill and restart a persistent child process whenever files change\n\
+  -s  run CMD using the shell specified by SHELL in the environment\n\
+  -z  exit after CMD completes; used with -r, only restart in response\n\
+        to filesystem events or commands\n\
+Any ARG of '/_' is replaced with the absolute path of the first file\n\
+which triggered the event. On the TTY, <space> runs or restarts CMD\n\
+immediately and <q> terminates entr.\n\
+");
+	exit(64);
 }
 
 void
@@ -307,7 +321,7 @@ process_input(FILE *file, WatchFile *files[], int max_files) {
 			continue;
 
 		if (stat(buf, &sb) == -1) {
-			warnx("unable to stat '%s'", buf);
+			warnx("Unable to stat '%s'", buf);
 			continue;
 		}
 		if (S_ISREG(sb.st_mode) != 0) {
@@ -351,7 +365,7 @@ int list_dir(char *dir) {
 	int count = 0;
 
 	if (dfd == NULL)
-		errx(1, "unable to open directory: '%s'", dir);
+		errx(1, "Unable to open directory '%s'", dir);
 	while((dp = readdir(dfd)) != NULL)
 		if ((dirwatch_opt == 2) || (dp->d_name[0] != '.'))
 			count++;
@@ -456,7 +470,7 @@ run_utility(char *argv[]) {
 
 	pid = fork();
 	if (pid == -1)
-		err(1, "can't fork");
+		err(1, "fork");
 
 	if (pid == 0) {
 		/* 2J - erase the entire display
@@ -519,7 +533,7 @@ watch_file(int kq, WatchFile *file) {
 		else break;
 	}
 	if (file->fd == -1) {
-		warn("cannot open '%s'", file->fn);
+		warn("Cannot open '%s'", file->fn);
 		terminate_utility();
 		exit(1);
 	}
@@ -528,11 +542,9 @@ watch_file(int kq, WatchFile *file) {
 	    file);
 	if (kevent(kq, &evSet, 1, NULL, 0, NULL) == -1) {
 		if (errno == ENOSPC)
-			errx(1, "Unable to allocate memory for kernel queue."
-			    " Please consult"
-			    " http://eradman.com/entrproject/limits.html");
+			errx(1, "Unable to allocate memory for kernel queue");
 		else
-			err(1, "failed to register VNODE event");
+			err(1, "Failed to register VNODE event");
 	}
 }
 
@@ -620,7 +632,7 @@ main:
 				EV_SET(&evSet, STDIN_FILENO, EVFILT_READ,
 				    EV_DELETE, NOTE_LOWAT, 0, NULL);
 				if (kevent(kq, &evSet, 1, NULL, 0, NULL) == -1)
-					err(1, "failed to remove READ event");
+					err(1, "Failed to remove READ event");
 			}
 			else {
 				if (c == ' ')
@@ -649,11 +661,11 @@ main:
 			EV_SET(&evSet, file->fd, EVFILT_VNODE, EV_DELETE,
 			    NOTE_ALL, 0, file);
 			if (kevent(kq, &evSet, 1, NULL, 0, NULL) == -1)
-				err(1, "failed to remove VNODE event");
+				err(1, "Failed to remove VNODE event");
 #if !defined(_LINUX_PORT)
 			/* free file descriptor no longer monitored by kqueue */
 			if ((file->fd != -1) && (close(file->fd) == -1))
-				err(1, "unable to close file");
+				err(1, "Unable to close file");
 #endif
 			watch_file(kq, file);
 			collate_only = 1;
@@ -725,7 +737,7 @@ main:
 	}
 	if (dir_modified > 0) {
 		terminate_utility();
-		errx(2, "directory altered");
+		errx(2, "Directory altered");
 	}
 
 	goto main;
diff --git a/missing/kqueue_inotify.c b/missing/kqueue_inotify.c
index 7891dda..0f6f12e 100644
--- a/missing/kqueue_inotify.c
+++ b/missing/kqueue_inotify.c
@@ -93,9 +93,9 @@ kqueue(void) {
 	if (inotify_queue == 0)
 		inotify_queue = inotify_init1(IN_CLOEXEC);
 	if (getenv("ENTR_INOTIFY_WORKAROUND"))
-		warnx("broken inotify workaround enabled");
+		warnx("Enabled broken inotify workaround");
 	else if (getenv("ENTR_INOTIFY_SYMLINK"))
-		warnx("monitoring symlinks");
+		warnx("Monitoring symlinks");
 	return inotify_queue;
 }
 
@@ -175,7 +175,7 @@ kevent(int kq, const struct kevent *changelist, int nchanges, struct
 	n = 0;
 	do {
 		if (pfd[0].revents & (POLLERR|POLLNVAL))
-			errx(1, "bad fd %d", pfd[0].fd);
+			errx(1, "Bad file descriptor: %d", pfd[0].fd);
 		if (pfd[0].revents & POLLIN) {
 			pos = 0;
 			len = read(kq /* ifd */, &buf, EVENT_BUF_LEN);
@@ -184,7 +184,7 @@ kevent(int kq, const struct kevent *changelist, int nchanges, struct
 				if (errno == EINTR)
 					continue;
 				else
-					errx(1, "read of fd %d failed", pfd[0].fd);
+					errx(1, "Read of file descriptor %d failed", pfd[0].fd);
 			}
 			while ((pos < len) && (n < nevents)) {
 				iev = (struct inotify_event *) &buf[pos];
@@ -220,7 +220,7 @@ kevent(int kq, const struct kevent *changelist, int nchanges, struct
 		}
 		if (read_stdin == 1) {
 			if (pfd[1].revents & (POLLERR|POLLNVAL))
-				errx(1, "bad fd %d", pfd[1].fd);
+				errx(1, "Bad file descriptor: %d", pfd[1].fd);
 			else if (pfd[1].revents & (POLLHUP|POLLIN)) {
 				fflags = 0;
 				eventlist[n].ident = pfd[1].fd;
