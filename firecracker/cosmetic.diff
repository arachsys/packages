diff --git a/src/firecracker/src/main.rs b/src/firecracker/src/main.rs
index cad421d..90974ed 100644
--- a/src/firecracker/src/main.rs
+++ b/src/firecracker/src/main.rs
@@ -110,108 +110,107 @@ fn main_exitable() -> FcExitCode {
             Argument::new("api-sock")
                 .takes_value(true)
                 .default_value(DEFAULT_API_SOCK_PATH)
-                .help("Path to unix domain socket used by the API."),
+                .help("API socket"),
         )
         .arg(
             Argument::new("id")
                 .takes_value(true)
                 .default_value(DEFAULT_INSTANCE_ID)
-                .help("MicroVM unique identifier."),
+                .help("MicroVM identifier"),
         )
         .arg(
             Argument::new("seccomp-filter")
                 .takes_value(true)
                 .forbids(vec!["no-seccomp"])
                 .help(
-                    "Optional parameter which allows specifying the path to a custom seccomp filter. For advanced users."
+                    "Custom seccomp filter file"
                 ),
         )
         .arg(
             Argument::new("no-seccomp")
                 .takes_value(false)
                 .forbids(vec!["seccomp-filter"])
-                .help("Optional parameter which allows starting and using a microVM without seccomp filtering. \
-                    Not recommended.")
+                .help("Disable seccomp filtering")
         )
         .arg(
             Argument::new("start-time-us")
                 .takes_value(true)
-                .help("Process start time (wall clock, microseconds). This parameter is optional."),
+                .help("Process start time"),
         )
         .arg(
             Argument::new("start-time-cpu-us")
                 .takes_value(true)
-                .help("Process start CPU time (wall clock, microseconds). This parameter is optional."),
+                .help("Process start CPU time"),
         )
         .arg(
             Argument::new("parent-cpu-time-us")
                 .takes_value(true)
-                .help("Parent process CPU time (wall clock, microseconds). This parameter is optional."),
+                .help("Parent process CPU time"),
         )
         .arg(
             Argument::new("config-file")
                 .takes_value(true)
-                .help("Path to a file that contains the microVM configuration in JSON format."),
+                .help("JSON configuration file"),
         )
         .arg(
             Argument::new(MMDS_CONTENT_ARG)
                 .takes_value(true)
-                .help("Path to a file that contains metadata in JSON format to add to the mmds.")
+                .help("JSON file to initialize MMDS")
         )
         .arg(
             Argument::new("no-api")
                 .takes_value(false)
                 .requires("config-file")
-                .help("Optional parameter which allows starting and using a microVM without an active API socket.")
+                .help("Disable API socket")
         )
         .arg(
             Argument::new("log-path")
                 .takes_value(true)
-                .help("Path to a fifo or a file used for configuring the logger on startup.")
+                .help("Log file or fifo")
         )
         .arg(
             Argument::new("level")
                 .takes_value(true)
                 .requires("log-path")
                 .default_value("Warning")
-                .help("Set the logger level.")
+                .help("Log level")
         )
         .arg(
             Argument::new("show-level")
                 .takes_value(false)
                 .requires("log-path")
-                .help("Whether or not to output the level in the logs.")
+                .help("Include log level in logs")
         )
         .arg(
             Argument::new("show-log-origin")
                 .takes_value(false)
                 .requires("log-path")
-                .help("Whether or not to include the file path and line number of the log's origin.")
+                .help("Include file and line number in logs")
         )
         .arg(
             Argument::new("boot-timer")
                 .takes_value(false)
-                .help("Whether or not to load boot timer device for logging elapsed time since InstanceStart command.")
+                .help("Log time since instance start")
         )
         .arg(
             Argument::new("version")
                 .takes_value(false)
-                .help("Print the binary version number and a list of supported snapshot data format versions.")
+                .help("Show version and snapshot formats")
         )
         .arg(
             Argument::new("describe-snapshot")
                 .takes_value(true)
-                .help("Print the data format version of the provided snapshot state file.")
+                .help("Show format of snapshot")
         )
         .arg(
             Argument::new("http-api-max-payload-size")
                 .takes_value(true)
                 .default_value(&http_max_payload_size_str)
-                .help("Http API request payload max size, in bytes.")
+                .help("Maximum HTTP request bytes")
         ).arg(
             Argument::new("mmds-size-limit")
                 .takes_value(true)
-                .help("Mmds data store limit, in bytes.")
+                .help("Maximum MMDS data size in bytes")
         );
 
     let arguments = match arg_parser.parse_from_cmdline() {
@@ -231,7 +230,7 @@ fn main_exitable() -> FcExitCode {
             }
 
             if arg_parser.arguments().flag_present("version") {
-                println!("Firecracker v{}\n", FIRECRACKER_VERSION);
+                println!("Firecracker v{}", FIRECRACKER_VERSION);
                 print_supported_snapshot_versions();
                 return vmm::FcExitCode::Ok;
             }
@@ -412,7 +411,7 @@ fn warn_deprecated_parameters() {}
 
 // Print supported snapshot data format versions.
 fn print_supported_snapshot_versions() {
-    let mut snapshot_versions_str = "Supported snapshot data format versions:".to_string();
+    let mut snapshot_versions_str = "Supported snapshot formats:".to_string();
     let mut snapshot_versions: Vec<String> = FC_VERSION_TO_SNAP_VERSION
         .iter()
         .map(|(key, _)| key.clone())
@@ -423,7 +422,7 @@ fn print_supported_snapshot_versions() {
         .iter()
         .for_each(|v| snapshot_versions_str.push_str(format!(" v{},", v).as_str()));
     snapshot_versions_str.pop();
-    println!("{}\n", snapshot_versions_str);
+    println!("{}", snapshot_versions_str);
 }
 
 // Print data format of provided snapshot state file.
diff --git a/src/logger/src/logger.rs b/src/logger/src/logger.rs
index 4a72a2e..ce49713 100644
--- a/src/logger/src/logger.rs
+++ b/src/logger/src/logger.rs
@@ -125,9 +125,9 @@ impl Logger {
         Logger {
             init: Init::new(),
             log_buf: Mutex::new(Box::new(sink())),
-            show_level: AtomicBool::new(true),
-            show_line_numbers: AtomicBool::new(true),
-            show_file_path: AtomicBool::new(true),
+            show_level: AtomicBool::new(false),
+            show_line_numbers: AtomicBool::new(false),
+            show_file_path: AtomicBool::new(false),
             instance_id: RwLock::new(String::new()),
         }
     }
diff --git a/src/utils/src/arg_parser.rs b/src/utils/src/arg_parser.rs
index 9f680f5..e579681 100644
--- a/src/utils/src/arg_parser.rs
+++ b/src/utils/src/arg_parser.rs
@@ -87,7 +87,7 @@ impl<'a> ArgParser<'a> {
 
         let required_arguments = self.format_arguments(true);
         if !required_arguments.is_empty() {
-            help_builder.push("required arguments:".to_string());
+            help_builder.push("Required arguments:".to_string());
             help_builder.push(required_arguments);
         }
 
@@ -98,7 +98,7 @@ impl<'a> ArgParser<'a> {
                 help_builder.push("".to_string());
             }
 
-            help_builder.push("optional arguments:".to_string());
+            help_builder.push("Optional arguments:".to_string());
             help_builder.push(optional_arguments);
         }
 
@@ -225,11 +225,11 @@ impl<'a> Argument<'a> {
 
         match (self.help, &self.default_value) {
             (Some(help), Some(default_value)) => {
-                help_builder.push(format!("{} [default: {}]", help, default_value))
+                help_builder.push(format!("{} [{}]", help, default_value))
             }
             (Some(help), None) => help_builder.push(help.to_string()),
             (None, Some(default_value)) => {
-                help_builder.push(format!("[default: {}]", default_value))
+                help_builder.push(format!("[{}]", default_value))
             }
             (None, None) => (),
         };
@@ -239,7 +239,11 @@ impl<'a> Argument<'a> {
 
     fn format_name(&self) -> String {
         if self.takes_value {
-            format!("  --{name} <{name}>", name = self.name)
+            format!(
+              "  --{name} <{placeholder}>",
+              name = self.name,
+              placeholder = self.name.split('-').last().unwrap_or("value")
+            )
         } else {
             format!("  --{}", self.name)
         }
@@ -278,7 +282,7 @@ impl fmt::Display for Value {
     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         match self {
             Value::Flag => write!(f, "true"),
-            Value::Single(s) => write!(f, "\"{}\"", s),
+            Value::Single(s) => write!(f, "{}", s),
             Value::Multiple(v) => write!(f, "{:?}", v),
         }
     }
@@ -364,7 +368,7 @@ impl<'a> Arguments<'a> {
         // command line arguments by adding just the help argument to the parsed list and
         // returning.
         if args.contains(&HELP_ARG.to_string()) {
-            let mut help_arg = Argument::new("help").help("Show the help message.");
+            let mut help_arg = Argument::new("help").help("Show this help");
             help_arg.user_value = Some(Value::Flag);
             self.insert_arg(help_arg);
             return Ok(());
