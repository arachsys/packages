diff --git a/src/vmm/src/builder.rs b/src/vmm/src/builder.rs
index 56739b3..004cc5d 100644
--- a/src/vmm/src/builder.rs
+++ b/src/vmm/src/builder.rs
@@ -992,6 +992,7 @@ pub mod tests {
         is_root_device: bool,
         partuuid: Option<String>,
         is_read_only: bool,
+        is_direct_io: bool,
         cache_type: CacheType,
     }
 
@@ -1001,6 +1002,7 @@ pub mod tests {
             is_root_device: bool,
             partuuid: Option<String>,
             is_read_only: bool,
+            is_direct_io: bool,
             cache_type: CacheType,
         ) -> Self {
             CustomBlockConfig {
@@ -1008,6 +1010,7 @@ pub mod tests {
                 is_root_device,
                 partuuid,
                 is_read_only,
+                is_direct_io,
                 cache_type,
             }
         }
@@ -1122,6 +1125,7 @@ pub mod tests {
                 is_root_device: custom_block_cfg.is_root_device,
                 partuuid: custom_block_cfg.partuuid.clone(),
                 is_read_only: custom_block_cfg.is_read_only,
+                is_direct_io: custom_block_cfg.is_direct_io,
                 cache_type: custom_block_cfg.cache_type,
                 rate_limiter: None,
                 file_engine_type: FileEngineType::default(),
@@ -1368,6 +1372,7 @@ pub mod tests {
                 true,
                 None,
                 true,
+                false,
                 CacheType::Unsafe,
             )];
             let mut vmm = default_vmm();
@@ -1388,6 +1393,7 @@ pub mod tests {
                 true,
                 Some("0eaa91a0-01".to_string()),
                 false,
+                false,
                 CacheType::Unsafe,
             )];
             let mut vmm = default_vmm();
@@ -1408,6 +1414,7 @@ pub mod tests {
                 false,
                 Some("0eaa91a0-01".to_string()),
                 false,
+                false,
                 CacheType::Unsafe,
             )];
             let mut vmm = default_vmm();
@@ -1429,6 +1436,7 @@ pub mod tests {
                     true,
                     Some("0eaa91a0-01".to_string()),
                     false,
+                    false,
                     CacheType::Unsafe,
                 ),
                 CustomBlockConfig::new(
@@ -1436,6 +1444,7 @@ pub mod tests {
                     false,
                     None,
                     true,
+                    false,
                     CacheType::Unsafe,
                 ),
                 CustomBlockConfig::new(
@@ -1443,6 +1452,7 @@ pub mod tests {
                     false,
                     None,
                     false,
+                    false,
                     CacheType::Unsafe,
                 ),
             ];
@@ -1481,6 +1491,7 @@ pub mod tests {
                 true,
                 None,
                 false,
+                false,
                 CacheType::Unsafe,
             )];
             let mut vmm = default_vmm();
@@ -1501,6 +1512,7 @@ pub mod tests {
                 true,
                 Some("0eaa91a0-01".to_string()),
                 true,
+                false,
                 CacheType::Unsafe,
             )];
             let mut vmm = default_vmm();
@@ -1521,6 +1533,7 @@ pub mod tests {
                 true,
                 None,
                 false,
+                false,
                 CacheType::Writeback,
             )];
             let mut vmm = default_vmm();
@@ -1532,6 +1545,27 @@ pub mod tests {
                 .get_device(DeviceType::Virtio(TYPE_BLOCK), drive_id.as_str())
                 .is_some());
         }
+
+        // Use case 8: root block device is rw with direct io.
+        {
+            let drive_id = String::from("root");
+            let block_configs = vec![CustomBlockConfig::new(
+                drive_id.clone(),
+                true,
+                None,
+                false,
+                true,
+                CacheType::Unsafe,
+            )];
+            let mut vmm = default_vmm();
+            let mut cmdline = default_kernel_cmdline();
+            insert_block_devices(&mut vmm, &mut cmdline, &mut event_manager, block_configs);
+            assert!(cmdline_contains(&cmdline, "root=/dev/vda rw"));
+            assert!(vmm
+                .mmio_device_manager
+                .get_device(DeviceType::Virtio(TYPE_BLOCK), drive_id.as_str())
+                .is_some());
+        }
     }
 
     #[test]
diff --git a/src/vmm/src/device_manager/persist.rs b/src/vmm/src/device_manager/persist.rs
index dcb6083..9207b9d 100644
--- a/src/vmm/src/device_manager/persist.rs
+++ b/src/vmm/src/device_manager/persist.rs
@@ -741,6 +741,7 @@ mod tests {
                 true,
                 None,
                 true,
+                false,
                 CacheType::Unsafe,
             )];
             _block_files =
@@ -875,7 +876,8 @@ mod tests {
       "is_read_only": true,
       "cache_type": "Unsafe",
       "rate_limiter": null,
-      "io_engine": "Sync"
+      "io_engine": "Sync",
+      "is_direct_io": false
     }}
   ],
   "boot-source": {{
diff --git a/src/vmm/src/devices/virtio/block/device.rs b/src/vmm/src/devices/virtio/block/device.rs
index daf7ecf..5500673 100644
--- a/src/vmm/src/devices/virtio/block/device.rs
+++ b/src/vmm/src/devices/virtio/block/device.rs
@@ -10,6 +10,7 @@ use std::convert::From;
 use std::fs::{File, OpenOptions};
 use std::io::{Seek, SeekFrom, Write};
 use std::os::linux::fs::MetadataExt;
+use std::os::unix::fs::OpenOptionsExt;
 use std::path::PathBuf;
 use std::sync::atomic::AtomicUsize;
 use std::sync::Arc;
@@ -77,6 +78,7 @@ impl FileEngineType {
 #[derive(Debug)]
 pub(crate) struct DiskProperties {
     cache_type: CacheType,
+    is_disk_direct_io: bool,
     file_path: String,
     file_engine: FileEngine<PendingRequest>,
     nsectors: u64,
@@ -87,12 +89,15 @@ impl DiskProperties {
     pub fn new(
         disk_image_path: String,
         is_disk_read_only: bool,
+        is_disk_direct_io: bool,
         cache_type: CacheType,
         file_engine_type: FileEngineType,
     ) -> Result<Self, BlockError> {
+        let custom_flags = if is_disk_direct_io { libc::O_DIRECT } else { 0 };
         let mut disk_image = OpenOptions::new()
             .read(true)
             .write(!is_disk_read_only)
+            .custom_flags(custom_flags)
             .open(PathBuf::from(&disk_image_path))
             .map_err(|x| BlockError::BackingFile(x, disk_image_path.clone()))?;
         let disk_size = disk_image
@@ -111,6 +116,7 @@ impl DiskProperties {
 
         Ok(Self {
             cache_type,
+            is_disk_direct_io,
             nsectors: disk_size >> SECTOR_SHIFT,
             image_id: Self::build_disk_image_id(&disk_image),
             file_path: disk_image_path,
@@ -241,12 +247,14 @@ impl Block {
         disk_image_path: String,
         is_disk_read_only: bool,
         is_disk_root: bool,
+        is_disk_direct_io: bool,
         rate_limiter: RateLimiter,
         file_engine_type: FileEngineType,
     ) -> Result<Block, BlockError> {
         let disk_properties = DiskProperties::new(
             disk_image_path,
             is_disk_read_only,
+            is_disk_direct_io,
             cache_type,
             file_engine_type,
         )?;
@@ -456,6 +464,7 @@ impl Block {
         let disk_properties = DiskProperties::new(
             disk_image_path,
             self.is_read_only(),
+            self.is_direct_io(),
             self.cache_type(),
             self.file_engine_type(),
         )?;
@@ -494,6 +503,11 @@ impl Block {
         self.avail_features & (1u64 << VIRTIO_BLK_F_RO) != 0
     }
 
+    /// Specifies if this block device uses direct IO.
+    pub fn is_direct_io(&self) -> bool {
+        self.disk.is_disk_direct_io
+    }
+
     /// Specifies if this block device is read only.
     pub fn is_root_device(&self) -> bool {
         self.root_device
@@ -672,6 +686,7 @@ mod tests {
         let disk_properties = DiskProperties::new(
             String::from(f.as_path().to_str().unwrap()),
             true,
+            false,
             CacheType::Unsafe,
             default_engine_type_for_kv(),
         )
@@ -690,6 +705,7 @@ mod tests {
         assert!(DiskProperties::new(
             "invalid-disk-path".to_string(),
             true,
+            false,
             CacheType::Unsafe,
             default_engine_type_for_kv(),
         )
diff --git a/src/vmm/src/devices/virtio/block/persist.rs b/src/vmm/src/devices/virtio/block/persist.rs
index b3f1b29..f9ee51a 100644
--- a/src/vmm/src/devices/virtio/block/persist.rs
+++ b/src/vmm/src/devices/virtio/block/persist.rs
@@ -103,6 +103,8 @@ pub struct BlockState {
     // v1.0 are incompatible with older FC versions (due to incompatible notification suppression
     // feature).
     file_engine_type: FileEngineTypeState,
+    #[version(start = 4, default_fn = "default_is_direct_io")]
+    is_direct_io: bool,
 }
 
 impl BlockState {
@@ -120,6 +122,10 @@ impl BlockState {
     fn default_cache_type_flush(_source_version: u16) -> CacheTypeState {
         CacheTypeState::Unsafe
     }
+
+    fn default_is_direct_io(_source_version: u16) -> bool {
+        false
+    }
 }
 
 /// Auxiliary structure for creating a device when resuming from a snapshot.
@@ -141,6 +147,7 @@ impl Persist<'_> for Block {
             partuuid: self.partuuid.clone(),
             cache_type: CacheTypeState::from(self.cache_type()),
             root_device: self.root_device,
+            is_direct_io: self.is_direct_io(),
             disk_path: self.disk.file_path().clone(),
             virtio_state: VirtioDeviceState::from_device(self),
             rate_limiter_state: self.rate_limiter.save(),
@@ -163,6 +170,7 @@ impl Persist<'_> for Block {
             state.disk_path.clone(),
             is_disk_read_only,
             state.root_device,
+            state.is_direct_io,
             rate_limiter,
             state.file_engine_type.into(),
         )
@@ -184,6 +192,7 @@ impl Persist<'_> for Block {
                     state.disk_path.clone(),
                     is_disk_read_only,
                     state.root_device,
+                    state.is_direct_io,
                     rate_limiter,
                     FileEngineType::Sync,
                 )
@@ -267,6 +276,7 @@ mod tests {
             f.as_path().to_str().unwrap().to_string(),
             false,
             false,
+            false,
             RateLimiter::default(),
             FileEngineType::default(),
         )
@@ -319,6 +329,7 @@ mod tests {
                 f.as_path().to_str().unwrap().to_string(),
                 false,
                 false,
+                false,
                 RateLimiter::default(),
                 // Need to use Sync because it will otherwise return an error.
                 // We'll overwrite the state instead.
@@ -364,6 +375,7 @@ mod tests {
             f.as_path().to_str().unwrap().to_string(),
             false,
             false,
+            false,
             RateLimiter::default(),
             FileEngineType::default(),
         )
diff --git a/src/vmm/src/devices/virtio/block/test_utils.rs b/src/vmm/src/devices/virtio/block/test_utils.rs
index 4e76d79..c876429 100644
--- a/src/vmm/src/devices/virtio/block/test_utils.rs
+++ b/src/vmm/src/devices/virtio/block/test_utils.rs
@@ -54,6 +54,7 @@ pub fn default_block_with_path(path: String, file_engine_type: FileEngineType) -
         path,
         false,
         false,
+        false,
         rate_limiter,
         file_engine_type,
     )
diff --git a/src/vmm/src/persist.rs b/src/vmm/src/persist.rs
index aff6d4a..8f5df98 100644
--- a/src/vmm/src/persist.rs
+++ b/src/vmm/src/persist.rs
@@ -715,6 +715,7 @@ mod tests {
             true,
             None,
             true,
+            false,
             CacheType::Unsafe,
         )];
         insert_block_devices(&mut vmm, &mut cmdline, &mut event_manager, block_configs);
diff --git a/src/vmm/src/resources.rs b/src/vmm/src/resources.rs
index 125db7e..adb773f 100644
--- a/src/vmm/src/resources.rs
+++ b/src/vmm/src/resources.rs
@@ -522,6 +522,7 @@ mod tests {
                 partuuid: Some("0eaa91a0-01".to_string()),
                 cache_type: CacheType::Unsafe,
                 is_read_only: false,
+                is_direct_io: false,
                 rate_limiter: Some(RateLimiterConfig::default()),
                 file_engine_type: FileEngineType::default(),
             },
diff --git a/src/vmm/src/rpc_interface.rs b/src/vmm/src/rpc_interface.rs
index d7ee989..1eca5c9 100644
--- a/src/vmm/src/rpc_interface.rs
+++ b/src/vmm/src/rpc_interface.rs
@@ -1381,6 +1381,7 @@ mod tests {
             drive_id: String::new(),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         });
         check_preboot_request(req, |result, vm_res| {
             assert_eq!(result, Ok(VmmData::Empty));
@@ -1396,6 +1397,7 @@ mod tests {
             drive_id: String::new(),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         });
         check_preboot_request_err(
             req,
@@ -2045,6 +2047,7 @@ mod tests {
                 drive_id: String::new(),
                 rate_limiter: None,
                 file_engine_type: FileEngineType::default(),
+                is_direct_io: false,
             }),
             VmmActionError::OperationNotSupportedPostBoot,
         );
@@ -2152,6 +2155,7 @@ mod tests {
             drive_id: String::new(),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         });
         verify_load_snap_disallowed_after_boot_resources(req, "InsertBlockDevice");
 
diff --git a/src/vmm/src/version_map.rs b/src/vmm/src/version_map.rs
index c433dde..b345923 100644
--- a/src/vmm/src/version_map.rs
+++ b/src/vmm/src/version_map.rs
@@ -65,10 +65,8 @@ lazy_static! {
         #[cfg(target_arch = "x86_64")]
         version_map.set_type_version(VcpuState::type_id(), 3);
 
-        // v1.3 - no changes introduced, but we need to bump as mapping
-        // between firecracker minor versions and snapshot versions needs
-        // to be 1-to-1 (see below)
-        version_map.new_version();
+        // v1.3 state change mappings.
+        version_map.new_version().set_type_version(BlockState::type_id(), 4);
 
         // v1.4 state change mappings.
         version_map.new_version().set_type_version(DeviceStates::type_id(), 4);
diff --git a/src/vmm/src/vmm_config/drive.rs b/src/vmm/src/vmm_config/drive.rs
index f3a9883..ad7a6b5 100644
--- a/src/vmm/src/vmm_config/drive.rs
+++ b/src/vmm/src/vmm_config/drive.rs
@@ -60,6 +60,9 @@ pub struct BlockDeviceConfig {
     #[serde(default)]
     #[serde(rename = "io_engine")]
     pub file_engine_type: FileEngineType,
+    /// If set to true, the disk is opened using direct IO.
+    #[serde(default)]
+    pub is_direct_io: bool,
 }
 
 impl From<&Block> for BlockDeviceConfig {
@@ -71,6 +74,7 @@ impl From<&Block> for BlockDeviceConfig {
             is_root_device: block.is_root_device(),
             partuuid: block.partuuid().cloned(),
             is_read_only: block.is_read_only(),
+            is_direct_io: block.is_direct_io(),
             cache_type: block.cache_type(),
             rate_limiter: rl.into_option(),
             file_engine_type: block.file_engine_type(),
@@ -199,6 +203,7 @@ impl BlockBuilder {
             block_device_config.path_on_host,
             block_device_config.is_read_only,
             block_device_config.is_root_device,
+            block_device_config.is_direct_io,
             rate_limiter.unwrap_or_default(),
             block_device_config.file_engine_type,
         )
@@ -238,6 +243,7 @@ mod tests {
                 partuuid: self.partuuid.clone(),
                 cache_type: self.cache_type,
                 is_read_only: self.is_read_only,
+                is_direct_io: self.is_direct_io,
                 drive_id: self.drive_id.clone(),
                 rate_limiter: None,
                 file_engine_type: FileEngineType::default(),
@@ -262,6 +268,7 @@ mod tests {
             partuuid: None,
             cache_type: CacheType::Writeback,
             is_read_only: false,
+            is_direct_io: false,
             drive_id: dummy_id.clone(),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
@@ -293,6 +300,7 @@ mod tests {
             partuuid: None,
             cache_type: CacheType::Unsafe,
             is_read_only: true,
+            is_direct_io: false,
             drive_id: String::from("1"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
@@ -324,6 +332,7 @@ mod tests {
             drive_id: String::from("1"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let dummy_file_2 = TempFile::new().unwrap();
@@ -337,6 +346,7 @@ mod tests {
             drive_id: String::from("2"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let mut block_devs = BlockBuilder::new();
@@ -361,6 +371,7 @@ mod tests {
             drive_id: String::from("1"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let dummy_file_2 = TempFile::new().unwrap();
@@ -374,6 +385,7 @@ mod tests {
             drive_id: String::from("2"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let dummy_file_3 = TempFile::new().unwrap();
@@ -387,6 +399,7 @@ mod tests {
             drive_id: String::from("3"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let mut block_devs = BlockBuilder::new();
@@ -425,6 +438,7 @@ mod tests {
             drive_id: String::from("1"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let dummy_file_2 = TempFile::new().unwrap();
@@ -438,6 +452,7 @@ mod tests {
             drive_id: String::from("2"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let dummy_file_3 = TempFile::new().unwrap();
@@ -451,6 +466,7 @@ mod tests {
             drive_id: String::from("3"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let mut block_devs = BlockBuilder::new();
@@ -490,6 +506,7 @@ mod tests {
             drive_id: String::from("1"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let dummy_file_2 = TempFile::new().unwrap();
@@ -503,6 +520,7 @@ mod tests {
             drive_id: String::from("2"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let mut block_devs = BlockBuilder::new();
@@ -562,6 +580,7 @@ mod tests {
             drive_id: String::from("1"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
         // Switch roots and add a PARTUUID for the new one.
         let mut root_block_device_old = root_block_device;
@@ -575,6 +594,7 @@ mod tests {
             drive_id: String::from("2"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
         assert!(block_devs.insert(root_block_device_old).is_ok());
         let root_block_id = root_block_device_new.drive_id.clone();
@@ -597,6 +617,7 @@ mod tests {
             drive_id: String::from("1"),
             rate_limiter: None,
             file_engine_type: FileEngineType::default(),
+            is_direct_io: false,
         };
 
         let mut block_devs = BlockBuilder::new();
@@ -619,6 +640,7 @@ mod tests {
             backing_file.as_path().to_str().unwrap().to_string(),
             true,
             true,
+            false,
             RateLimiter::default(),
             FileEngineType::default(),
         )
diff --git a/tests/framework/vm_config.json b/tests/framework/vm_config.json
index 7183058..3e14ed0 100644
--- a/tests/framework/vm_config.json
+++ b/tests/framework/vm_config.json
@@ -13,7 +13,8 @@
       "is_read_only": false,
       "cache_type": "Unsafe",
       "io_engine": "Sync",
-      "rate_limiter": null
+      "rate_limiter": null,
+      "is_direct_io": false
     }
   ],
   "machine-config": {
diff --git a/tests/integration_tests/functional/test_api.py b/tests/integration_tests/functional/test_api.py
index 9dae036..a9e6f32 100644
--- a/tests/integration_tests/functional/test_api.py
+++ b/tests/integration_tests/functional/test_api.py
@@ -874,6 +874,7 @@ def _drive_patch(test_microvm):
             "is_root_device": True,
             "partuuid": None,
             "is_read_only": True,
+            "is_direct_io": False,
             "cache_type": "Unsafe",
             "io_engine": "Sync",
             "rate_limiter": None,
@@ -884,6 +885,7 @@ def _drive_patch(test_microvm):
             "is_root_device": False,
             "partuuid": None,
             "is_read_only": False,
+            "is_direct_io": False,
             "cache_type": "Unsafe",
             "io_engine": "Async" if is_io_uring_supported() else "Sync",
             "rate_limiter": {
@@ -1090,6 +1092,7 @@ def test_get_full_config_after_restoring_snapshot(microvm_factory, uvm_nano):
             "cache_type": "Unsafe",
             "rate_limiter": None,
             "io_engine": "Sync",
+            "is_direct_io": False,
         }
     ]
 
@@ -1199,6 +1202,7 @@ def test_get_full_config(test_microvm_with_api):
             "cache_type": "Unsafe",
             "rate_limiter": None,
             "io_engine": "Sync",
+            "is_direct_io": False,
         }
     ]
 
