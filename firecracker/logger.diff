diff --git a/src/firecracker/src/main.rs b/src/firecracker/src/main.rs
index 72fb110..28be78c 100644
--- a/src/firecracker/src/main.rs
+++ b/src/firecracker/src/main.rs
@@ -200,6 +200,11 @@ fn main_exec() -> Result<(), MainError> {
                     .default_value("Warning")
                     .help("Log level"),
             )
+            .arg(
+                Argument::new("show-instance-id")
+                    .takes_value(false)
+                    .help("Include microVM identifier in logs"),
+            )
             .arg(
                 Argument::new("show-level")
                     .takes_value(false)
@@ -208,6 +213,16 @@ fn main_exec() -> Result<(), MainError> {
             .arg(Argument::new("show-log-origin").takes_value(false).help(
                 "Include file and line number in logs",
             ))
+            .arg(
+                Argument::new("show-thread-name")
+                    .takes_value(false)
+                    .help("Include thread name in logs"),
+            )
+            .arg(
+                Argument::new("show-timestamp")
+                    .takes_value(false)
+                    .help("Include timestamp in logs"),
+            )
             .arg(
                 Argument::new("metrics-path")
                     .takes_value(true)
@@ -270,12 +285,18 @@ fn main_exec() -> Result<(), MainError> {
         .map(|s| vmm::logger::LevelFilter::from_str(s))
         .transpose()
         .map_err(MainError::InvalidLogLevel)?;
+    let show_timestamp = arguments.flag_present("show-timestamp").then_some(true);
+    let show_instance_id = arguments.flag_present("show-instance-id").then_some(true);
+    let show_thread_name = arguments.flag_present("show-thread-name").then_some(true);
     let show_level = arguments.flag_present("show-level").then_some(true);
     let show_log_origin = arguments.flag_present("show-log-origin").then_some(true);
     LOGGER
         .update(LoggerConfig {
             log_path,
             level,
+            show_timestamp,
+            show_instance_id,
+            show_thread_name,
             show_level,
             show_log_origin,
         })
diff --git a/src/vmm/src/logger/logging.rs b/src/vmm/src/logger/logging.rs
index 32e5fd7..cd13554 100644
--- a/src/vmm/src/logger/logging.rs
+++ b/src/vmm/src/logger/logging.rs
@@ -17,7 +17,7 @@ use super::metrics::{IncMetric, METRICS};
 
 /// Default level filter for logger matching the swagger specification
 /// (`src/api_server/swagger/firecracker.yaml`).
-pub const DEFAULT_LEVEL: log::LevelFilter = log::LevelFilter::Info;
+pub const DEFAULT_LEVEL: log::LevelFilter = log::LevelFilter::Warn;
 /// Default instance id.
 pub const DEFAULT_INSTANCE_ID: &str = "anonymous-instance";
 /// Instance id.
@@ -29,6 +29,9 @@ pub static INSTANCE_ID: OnceLock<String> = OnceLock::new();
 pub static LOGGER: Logger = Logger(Mutex::new(LoggerConfiguration {
     target: None,
     format: LogFormat {
+        show_timestamp: false,
+        show_instance_id: false,
+        show_thread_name: false,
         show_level: false,
         show_log_origin: false,
     },
@@ -71,6 +74,18 @@ impl Logger {
             guard.target = Some(file);
         };
 
+        if let Some(show_timestamp) = config.show_timestamp {
+            guard.format.show_timestamp = show_timestamp;
+        }
+
+        if let Some(show_instance_id) = config.show_instance_id {
+            guard.format.show_instance_id = show_instance_id;
+        }
+
+        if let Some(show_thread_name) = config.show_thread_name {
+            guard.format.show_thread_name = show_thread_name;
+        }
+
         if let Some(show_level) = config.show_level {
             guard.format.show_level = show_level;
         }
@@ -89,6 +104,9 @@ impl Logger {
 
 #[derive(Debug)]
 pub struct LogFormat {
+    pub show_timestamp: bool,
+    pub show_instance_id: bool,
+    pub show_thread_name: bool,
     pub show_level: bool,
     pub show_log_origin: bool,
 }
@@ -112,33 +130,50 @@ impl Log for Logger {
 
         // Prints log message
         {
-            let thread = thread::current().name().unwrap_or("-").to_string();
-            let level = match guard.format.show_level {
-                true => format!(":{}", record.level()),
+            let timestamp = match guard.format.show_timestamp {
+                true => format!("{} ", LocalTime::now()),
                 false => String::new(),
             };
 
-            let origin = match guard.format.show_log_origin {
-                true => {
-                    let file = record.file().unwrap_or("?");
-                    let line = match record.line() {
-                        Some(x) => x.to_string(),
-                        None => String::from("?"),
-                    };
-                    format!(":{file}:{line}")
-                }
-                false => String::new(),
+            let mut prefix: Vec<String> = vec![];
+
+            if guard.format.show_instance_id {
+                prefix.push(
+                    INSTANCE_ID
+                        .get()
+                        .map(|s| s.as_str())
+                        .unwrap_or(DEFAULT_INSTANCE_ID)
+                        .to_string()
+                );
+            }
+
+            if guard.format.show_thread_name {
+                prefix.push(
+                    thread::current().name().unwrap_or("-").to_string()
+                );
+            }
+
+            if guard.format.show_level {
+                prefix.push(
+                    record.level().to_string()
+                );
+            }
+
+            if guard.format.show_log_origin {
+                prefix.push(record.file().unwrap_or("?").to_string());
+                prefix.push(match record.line() {
+                    Some(x) => x.to_string(),
+                    None => String::from("?"),
+                });
+            }
+
+            let prefix = if prefix.is_empty() {
+                String::new()
+            } else {
+                format!("[{}] ", prefix.join(":"))
             };
 
-            let message = format!(
-                "{} [{}:{thread}{level}{origin}] {}\n",
-                LocalTime::now(),
-                INSTANCE_ID
-                    .get()
-                    .map(|s| s.as_str())
-                    .unwrap_or(DEFAULT_INSTANCE_ID),
-                record.args()
-            );
+            let message = format!("{timestamp}{prefix}{}\n", record.args());
 
             let result = if let Some(file) = &mut guard.target {
                 file.write_all(message.as_bytes())
@@ -168,6 +203,12 @@ pub struct LoggerConfig {
     pub log_path: Option<PathBuf>,
     /// The level of the Logger.
     pub level: Option<LevelFilter>,
+    /// Whether to show timestamps in the log.
+    pub show_timestamp: Option<bool>,
+    /// Whether to show the instance id in the log.
+    pub show_instance_id: Option<bool>,
+    /// Whether to show the thread name in the log.
+    pub show_thread_name: Option<bool>,
     /// Whether to show the log level in the log.
     pub show_level: Option<bool>,
     /// Whether to show the log origin in the log.
