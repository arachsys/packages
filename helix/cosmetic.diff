diff --git a/helix-loader/src/lib.rs b/helix-loader/src/lib.rs
index 6c716975..3a1e7b95 100644
--- a/helix-loader/src/lib.rs
+++ b/helix-loader/src/lib.rs
@@ -137,7 +137,7 @@ pub fn lang_config_file() -> PathBuf {
 }
 
 pub fn log_file() -> PathBuf {
-    cache_dir().join("helix.log")
+    PathBuf::from("/dev/null")
 }
 
 /// Merge two TOML documents, merging values from `right` onto `left`
diff --git a/helix-term/src/health.rs b/helix-term/src/health.rs
index 480c2c67..e2ee1d53 100644
--- a/helix-term/src/health.rs
+++ b/helix-term/src/health.rs
@@ -82,14 +82,14 @@ pub fn general() -> std::io::Result<()> {
                 rt_dir.display(),
                 path.display()
             );
-            writeln!(stdout, "{}", msg.yellow())?;
+            writeln!(stdout, "{}", msg.dark_yellow())?;
         }
         if !rt_dir.exists() {
             let msg = format!("Runtime directory does not exist: {}", rt_dir.display());
-            writeln!(stdout, "{}", msg.yellow())?;
+            writeln!(stdout, "{}", msg.dark_yellow())?;
         } else if rt_dir.read_dir().ok().map(|it| it.count()) == Some(0) {
             let msg = format!("Runtime directory is empty: {}", rt_dir.display());
-            writeln!(stdout, "{}", msg.yellow())?;
+            writeln!(stdout, "{}", msg.dark_yellow())?;
         }
     }
     writeln!(stdout, "Clipboard provider: {}", clipboard_provider.name())?;
@@ -140,7 +140,7 @@ pub fn languages_all() -> std::io::Result<()> {
                 "Error parsing user language config".red(),
                 err
             )?;
-            writeln!(stderr, "{}", "Using default language config".yellow())?;
+            writeln!(stderr, "{}", "Using default language config".dark_yellow())?;
             default_syntax_loader()
         }
     };
@@ -173,7 +173,7 @@ pub fn languages_all() -> std::io::Result<()> {
     };
 
     for heading in headings {
-        column(heading, Color::White);
+        column(heading, Color::Blue);
     }
     writeln!(stdout)?;
 
@@ -186,7 +186,7 @@ pub fn languages_all() -> std::io::Result<()> {
             Ok(_) => column(&format!("✓ {}", cmd), Color::Green),
             Err(_) => column(&format!("✘ {}", cmd), Color::Red),
         },
-        None => column("None", Color::Yellow),
+        None => column("None", Color::DarkYellow),
     };
 
     for lang in &syn_loader_conf.language {
@@ -232,7 +232,7 @@ pub fn language(lang_str: String) -> std::io::Result<()> {
                 "Error parsing user language config".red(),
                 err
             )?;
-            writeln!(stderr, "{}", "Using default language config".yellow())?;
+            writeln!(stderr, "{}", "Using default language config".dark_yellow())?;
             default_syntax_loader()
         }
     };
@@ -257,7 +257,7 @@ pub fn language(lang_str: String) -> std::io::Result<()> {
                 writeln!(
                     stdout,
                     "Did you mean one of these: {} ?",
-                    suggestions.yellow()
+                    suggestions.dark_yellow()
                 )?;
             }
             return Ok(());
@@ -290,7 +290,7 @@ fn probe_protocol(protocol_name: &str, server_cmd: Option<String>) -> std::io::R
 
     let cmd_name = match server_cmd {
         Some(ref cmd) => cmd.as_str().green(),
-        None => "None".yellow(),
+        None => "None".dark_yellow(),
     };
     writeln!(stdout, "Configured {}: {}", protocol_name, cmd_name)?;
 
diff --git a/helix-term/src/main.rs b/helix-term/src/main.rs
index e0c3f6e7..d10525ff 100644
--- a/helix-term/src/main.rs
+++ b/helix-term/src/main.rs
@@ -49,36 +49,21 @@ async fn main_impl() -> Result<i32> {
 
     let help = format!(
         "\
-{} {}
-{}
-{}
-
-USAGE:
-    hx [FLAGS] [files]...
-
-ARGS:
-    <files>...    Sets the input file to use, position can also be specified via file[:row[:col]]
-
-FLAGS:
-    -h, --help                     Prints help information
-    --tutor                        Loads the tutorial
-    --health [CATEGORY]            Checks for potential errors in editor setup
-                                   CATEGORY can be a language or one of 'clipboard', 'languages'
-                                   or 'all'. 'all' is the default if not specified.
-    -g, --grammar {{fetch|build}}    Fetches or builds tree-sitter grammars listed in languages.toml
-    -c, --config <file>            Specifies a file to use for configuration
-    -v                             Increases logging verbosity each use for up to 3 times
-    --log                          Specifies a file to use for logging
-                                   (default file: {})
-    -V, --version                  Prints version information
-    --vsplit                       Splits all given files vertically into different windows
-    --hsplit                       Splits all given files horizontally into different windows
+Usage: hx [OPTION]... [FILE[:ROW[:COL]]]...
+Options:
+    -h, --help                     Print help information
+    --tutor                        Load the tutorial
+    --health [CATEGORY]            Check for potential errors in editor setup, where
+                                   CATEGORY is a language or one of 'clipboard', 'languages'
+                                   or 'all' (the default)
+    -g, --grammar {{fetch|build}}    Fetch or build tree-sitter grammars listed in languages.toml
+    -c, --config FILE              Specify configuration file
+    -v                             Increase logging verbosity with each use up to 3 times
+    --log FILE                     Specify a file to use for logging
+    -V, --version                  Print version information
+    --vsplit                       Split all given files vertically into different windows
+    --hsplit                       Split all given files horizontally into different windows
 ",
-        env!("CARGO_PKG_NAME"),
-        VERSION_AND_GIT_HASH,
-        env!("CARGO_PKG_AUTHORS"),
-        env!("CARGO_PKG_DESCRIPTION"),
-        logpath.display(),
     );
 
     let args = Args::parse_args().context("could not parse arguments")?;
