diff --git a/src/bin/ch-remote.rs b/src/bin/ch-remote.rs
index 803ffc7e..2e91540b 100644
--- a/src/bin/ch-remote.rs
+++ b/src/bin/ch-remote.rs
@@ -16,7 +16,7 @@ use api_client::{
     Error as ApiClientError, simple_api_command, simple_api_command_with_fds,
     simple_api_full_command,
 };
-use clap::{Arg, ArgAction, ArgMatches, Command};
+use clap::{Arg, ArgAction, ArgMatches, ColorChoice, Command};
 use log::error;
 use option_parser::{ByteSized, ByteSizedParseError};
 use thiserror::Error;
@@ -911,17 +911,17 @@ fn get_cli_args() -> Box<[Arg]> {
     [
         Arg::new("api-socket")
             .long("api-socket")
-            .help("HTTP API socket path (UNIX domain socket).")
+            .help("API socket path")
             .num_args(1),
         #[cfg(feature = "dbus_api")]
         Arg::new("dbus-object-path")
             .long("dbus-object-path")
-            .help("Object path which the interface is being served at")
+            .help("D-Bus object path")
             .num_args(1),
         #[cfg(feature = "dbus_api")]
         Arg::new("dbus-service-name")
             .long("dbus-service-name")
-            .help("Well known name of the dbus service")
+            .help("D-Bus service name")
             .num_args(1),
         #[cfg(feature = "dbus_api")]
         Arg::new("dbus-system-bus")
@@ -939,58 +939,58 @@ fn get_cli_args() -> Box<[Arg]> {
 /// This is the order used in the `--help` output.
 fn get_cli_commands_sorted() -> Box<[Command]> {
     [
-        Command::new("add-device").about("Add VFIO device").arg(
+        Command::new("add-device").about("Add a VFIO device").arg(
             Arg::new("device_config")
                 .index(1)
                 .help(DeviceConfig::SYNTAX),
         ),
         Command::new("add-disk")
-            .about("Add block device")
+            .about("Add a block device")
             .arg(Arg::new("disk_config").index(1).help(DiskConfig::SYNTAX)),
         Command::new("add-fs")
-            .about("Add virtio-fs backed fs device")
+            .about("Add a virtio-fs backed fs device")
             .arg(
                 Arg::new("fs_config")
                     .index(1)
                     .help(vmm::vm_config::FsConfig::SYNTAX),
             ),
         Command::new("add-net")
-            .about("Add network device")
+            .about("Add a network device")
             .arg(Arg::new("net_config").index(1).help(NetConfig::SYNTAX)),
         Command::new("add-pmem")
-            .about("Add persistent memory device")
+            .about("Add a persistent memory device")
             .arg(
                 Arg::new("pmem_config")
                     .index(1)
                     .help(vmm::vm_config::PmemConfig::SYNTAX),
             ),
         Command::new("add-user-device")
-            .about("Add userspace device")
+            .about("Add a userspace device")
             .arg(
                 Arg::new("device_config")
                     .index(1)
                     .help(UserDeviceConfig::SYNTAX),
             ),
         Command::new("add-vdpa")
-            .about("Add vDPA device")
+            .about("Add a vDPA device")
             .arg(Arg::new("vdpa_config").index(1).help(VdpaConfig::SYNTAX)),
         Command::new("add-vsock")
-            .about("Add vsock device")
+            .about("Add a vsock device")
             .arg(Arg::new("vsock_config").index(1).help(VsockConfig::SYNTAX)),
-        Command::new("boot").about("Boot a created VM"),
+        Command::new("boot").about("Boot the VM"),
         Command::new("coredump")
-            .about("Create a coredump from VM")
+            .about("Create a coredump from the VM")
             .arg(Arg::new("coredump_config").index(1).help("<file_path>")),
-        Command::new("counters").about("Counters from the VM"),
+        Command::new("counters").about("Read counters from the VM"),
         Command::new("create")
-            .about("Create VM from a JSON configuration")
+            .about("Create the VM from a JSON configuration")
             .arg(Arg::new("path").index(1).default_value("-")),
-        Command::new("delete").about("Delete a VM"),
+        Command::new("delete").about("Delete the VM"),
         Command::new("info").about("Info on the VM"),
-        Command::new("nmi").about("Trigger NMI"),
+        Command::new("nmi").about("Trigger an NMI"),
         Command::new("pause").about("Pause the VM"),
-        Command::new("ping").about("Ping the VMM to check for API server availability"),
-        Command::new("power-button").about("Trigger a power button in the VM"),
+        Command::new("ping").about("Check the API server"),
+        Command::new("power-button").about("Trigger the power button in the VM"),
         Command::new("reboot").about("Reboot the VM"),
         Command::new("receive-migration")
             .about("Receive a VM migration")
@@ -1000,7 +1000,7 @@ fn get_cli_commands_sorted() -> Box<[Command]> {
                     .help("<receiver_url>"),
             ),
         Command::new("remove-device")
-            .about("Remove VFIO and PCI device")
+            .about("Remove a VFIO or PCI device")
             .arg(Arg::new("id").index(1).help("<device_id>")),
         Command::new("resize")
             .about("Resize the VM")
@@ -1013,7 +1013,7 @@ fn get_cli_commands_sorted() -> Box<[Command]> {
             .arg(
                 Arg::new("cpus")
                     .long("cpus")
-                    .help("New vCPUs count")
+                    .help("New number of vCPUs")
                     .num_args(1),
             )
             .arg(
@@ -1037,7 +1037,7 @@ fn get_cli_commands_sorted() -> Box<[Command]> {
                     .num_args(1),
             ),
         Command::new("restore")
-            .about("Restore VM from a snapshot")
+            .about("Restore the VM from a snapshot")
             .arg(
                 Arg::new("restore_config")
                     .index(1)
@@ -1060,7 +1060,7 @@ fn get_cli_commands_sorted() -> Box<[Command]> {
         Command::new("shutdown").about("Shutdown the VM"),
         Command::new("shutdown-vmm").about("Shutdown the VMM"),
         Command::new("snapshot")
-            .about("Create a snapshot from VM")
+            .about("Create a snapshot from the VM")
             .arg(
                 Arg::new("snapshot_config")
                     .index(1)
@@ -1073,10 +1073,11 @@ fn get_cli_commands_sorted() -> Box<[Command]> {
 
 fn main() {
     env_logger::init();
-    let app = Command::new("ch-remote")
+    let app = Command::new("cloud-hypervisor")
         .author(env!("CARGO_PKG_AUTHORS"))
         .version(env!("BUILD_VERSION"))
-        .about("Remotely control a cloud-hypervisor VMM.")
+        .about("Control a cloud-hypervisor VMM")
+        .color(ColorChoice::Never)
         .arg_required_else_help(true)
         .subcommand_required(true)
         .args(get_cli_args())
@@ -1128,9 +1129,7 @@ fn main() {
             process::exit(1);
         }
         _ => {
-            error!(
-                "Please either provide the api-socket option or dbus-service-name and dbus-object-path options"
-            );
+            error!("Please provide the --api-socket option");
             process::exit(1);
         }
     };
@@ -1168,7 +1167,7 @@ fn main() {
                     Ok(json) => json,
                     Err(e) => {
                         return Some(format!(
-                            "{idention}X: Can't get remote's error messages from JSON response: {e}: body='{body}'",
+                            "{idention}X: Can't get error messages from JSON response: {e}: body='{body}'",
                             idention = " ".repeat(indention)
                         ));
                     }
diff --git a/src/main.rs b/src/main.rs
index 7bdcbfac..ba6f90d7 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -12,7 +12,7 @@ use std::sync::Mutex;
 use std::sync::mpsc::channel;
 use std::{env, io};
 
-use clap::{Arg, ArgAction, ArgGroup, ArgMatches, Command};
+use clap::{Arg, ArgAction, ArgGroup, ArgMatches, Command, ColorChoice};
 use event_monitor::event;
 use libc::EFD_NONBLOCK;
 use log::{LevelFilter, error, warn};
@@ -52,7 +52,7 @@ enum Error {
     CreateDebugEventFd(#[source] std::io::Error),
     #[error("Failed to create exit EventFd")]
     CreateExitEventFd(#[source] std::io::Error),
-    #[error("Failed to open hypervisor interface (is hypervisor interface available?)")]
+    #[error("Failed to open hypervisor interface")]
     CreateHypervisor(#[source] hypervisor::HypervisorError),
     #[error("Failed to start the VMM thread")]
     StartVmmThread(#[source] vmm::Error),
@@ -191,7 +191,7 @@ fn get_cli_options_sorted(
     [
         Arg::new("api-socket")
             .long("api-socket")
-            .help("HTTP API socket (UNIX domain socket): path=</path/to/a/file> or fd=<fd>.")
+            .help("API socket: path=<path>|fd=<fd>")
             .num_args(1)
             .group("vmm-config"),
         Arg::new("balloon")
@@ -206,14 +206,14 @@ fn get_cli_options_sorted(
             .group("vm-config"), Arg::new("console")
             .long("console")
             .help(
-                "Control (virtio) console: \"off|null|pty|tty|file=</path/to/a/file>,iommu=on|off\"",
+                "Virtio console parameters: off|null|pty|tty|file=<path>,iommu=on|off",
             )
             .default_value("tty")
             .group("vm-config"),
         Arg::new("cpus")
             .long("cpus")
             .help(
-                "boot=<boot_vcpus>,max=<max_vcpus>,\
+                "CPU parameters: boot=<vcpus>,max=<vcpus>,\
                     topology=<threads_per_core>:<cores_per_die>:<dies_per_package>:<packages>,\
                     kvm_hyperv=on|off,max_phys_bits=<maximum_number_of_physical_bits>,\
                     affinity=<list_of_vcpus_with_their_associated_cpuset>,\
@@ -224,13 +224,13 @@ fn get_cli_options_sorted(
         #[cfg(target_arch = "x86_64")]
         Arg::new("debug-console")
             .long("debug-console")
-            .help("Debug console: off|pty|tty|file=</path/to/a/file>,iobase=<port in hex>")
+            .help("Debug console parameters: off|pty|tty|file=<path>,iobase=<port>")
             .default_value("off,iobase=0xe9")
             .group("vm-config"),
         #[cfg(feature = "dbus_api")]
         Arg::new("dbus-service-name")
             .long("dbus-service-name")
-            .help("Well known name of the device")
+            .help("Well-known name of the device")
             .num_args(1)
             .group("vmm-config"),
         #[cfg(feature = "dbus_api")]
@@ -258,12 +258,12 @@ fn get_cli_options_sorted(
             .group("vm-config"),
         Arg::new("event-monitor")
             .long("event-monitor")
-            .help("File to report events on: path=</path/to/a/file> or fd=<fd>")
+            .help("Event monitor: path=<path>|fd=<fd>")
             .num_args(1)
             .group("vmm-config"),
         Arg::new("firmware")
             .long("firmware")
-            .help("Path to firmware that is loaded in an architectural specific way")
+            .help("Path to architecture-specific firmware")
             .num_args(1)
             .group("vm-payload"),
         Arg::new("fs")
@@ -280,13 +280,13 @@ fn get_cli_options_sorted(
         #[cfg(feature = "guest_debug")]
         Arg::new("gdb")
             .long("gdb")
-            .help("GDB socket (UNIX domain socket): path=</path/to/a/file>")
+            .help("GDB socket: path=<path>")
             .num_args(1)
             .group("vmm-config"),
         #[cfg(feature = "igvm")]
         Arg::new("igvm")
             .long("igvm")
-            .help("Path to IGVM file to load.")
+            .help("Path to IGVM file")
             .num_args(1)
             .group("vm-payload"),
         #[cfg(feature = "sev_snp")]
@@ -308,17 +308,14 @@ fn get_cli_options_sorted(
             .group("vm-config"),
         Arg::new("kernel")
             .long("kernel")
-            .help(
-                "Path to kernel to load. This may be a kernel or firmware that supports a PVH \
-                entry point (e.g. vmlinux) or architecture equivalent",
-            )
+            .help("Path to kernel image")
             .num_args(1)
             .group("vm-payload"),
         Arg::new("landlock")
             .long("landlock")
             .num_args(0)
             .help(
-                "enable/disable Landlock.",
+                "Enable/disable Landlock",
             )
             .action(ArgAction::SetTrue)
             .default_value("false")
@@ -330,33 +327,31 @@ fn get_cli_options_sorted(
             .group("vm-config"),
         Arg::new("log-file")
             .long("log-file")
-            .help("Log file. Standard error is used if not specified")
+            .help("Log file [default: stderr]")
             .num_args(1)
             .group("logging"),
         Arg::new("memory")
             .long("memory")
             .help(
-                "Memory parameters \
-                     \"size=<guest_memory_size>,mergeable=on|off,shared=on|off,\
+                "Memory parameters: size=<guest_memory_size>,mergeable=on|off,shared=on|off,\
                      hugepages=on|off,hugepage_size=<hugepage_size>,\
                      hotplug_method=acpi|virtio-mem,\
                      hotplug_size=<hotpluggable_memory_size>,\
                      hotplugged_size=<hotplugged_memory_size>,\
-                     prefault=on|off,thp=on|off\"",
+                     prefault=on|off,thp=on|off",
             )
             .default_value(default_memory)
             .group("vm-config"),
         Arg::new("memory-zone")
             .long("memory-zone")
             .help(
-                "User defined memory zone parameters \
-                     \"size=<guest_memory_region_size>,file=<backing_file>,\
+                "Memory zone parameters size=<guest_memory_region_size>,file=<backing_file>,\
                      shared=on|off,\
                      hugepages=on|off,hugepage_size=<hugepage_size>,\
                      host_numa_node=<node_id>,\
                      id=<zone_identifier>,hotplug_size=<hotpluggable_memory_size>,\
                      hotplugged_size=<hotplugged_memory_size>,\
-                     prefault=on|off\"",
+                     prefault=on|off",
             )
             .num_args(1..)
             .group("vm-config"),
@@ -378,7 +373,7 @@ fn get_cli_options_sorted(
         Arg::new("platform")
             .long("platform")
             .help(
-                "num_pci_segments=<num_pci_segments>,iommu_segments=<list_of_segments>,iommu_address_width=<bits>,serial_number=<dmi_device_serial_number>,uuid=<dmi_device_uuid>,oem_strings=<list_of_strings>"
+                "Platform parameters: num_pci_segments=<num_pci_segments>,iommu_segments=<list_of_segments>,iommu_address_width=<bits>,serial_number=<dmi_device_serial_number>,uuid=<dmi_device_uuid>,oem_strings=<list_of_strings>"
             )
             .num_args(1)
             .group("vm-config"),
@@ -413,7 +408,7 @@ fn get_cli_options_sorted(
         Arg::new("rng")
             .long("rng")
             .help(
-                "Random number generator parameters \"src=<entropy_source_path>,iommu=on|off\"",
+                "Random number generator parameters: src=<entropy_source_path>,iommu=on|off",
             )
             .default_value(default_rng)
             .group("vm-config"),
@@ -424,7 +419,7 @@ fn get_cli_options_sorted(
             .default_value("true"),
         Arg::new("serial")
             .long("serial")
-            .help("Control serial port: off|null|pty|tty|file=</path/to/a/file>|socket=</path/to/a/file>")
+            .help("Serial port parameters: off|null|pty|tty|file=<path>|socket=<path>")
             .default_value("null")
             .group("vm-config"),
         Arg::new("tpm")
@@ -439,8 +434,9 @@ fn get_cli_options_sorted(
             .group("vm-config"),
         Arg::new("v")
             .short('v')
+            .long("verbose")
             .action(ArgAction::Count)
-            .help("Sets the level of debugging output")
+            .help("Set the level of debugging output")
             .group("logging"),
         Arg::new("vdpa")
             .long("vdpa")
@@ -484,7 +480,8 @@ fn create_app(default_vcpus: String, default_memory: String, default_rng: String
         // 'BUILD_VERSION' is set by the build script 'build.rs' at
         // compile time
         .author(env!("CARGO_PKG_AUTHORS"))
-        .about("Launch a cloud-hypervisor VMM.")
+        .about("Launch a cloud-hypervisor VMM")
+        .color(ColorChoice::Never)
         .arg_required_else_help(true)
         .groups(groups)
         .args(args)
@@ -561,11 +558,7 @@ fn start_vmm(cmd_arguments: ArgMatches) -> Result<Option<String>, Error> {
         // handler safe functions (writing to stderr) and manipulating signals.
         unsafe {
             signal_hook::low_level::register(signal_hook::consts::SIGSYS, || {
-                eprintln!(
-                    "\n==== Possible seccomp violation ====\n\
-                Try running with `strace -ff` to identify the cause and open an issue: \
-                https://github.com/cloud-hypervisor/cloud-hypervisor/issues/new"
-                );
+                eprintln!("Possible seccomp violation");
                 signal_hook::low_level::emulate_default_handler(SIGSYS).unwrap();
             })
         }
diff --git a/vmm/src/config.rs b/vmm/src/config.rs
index 366b369e..6a75e701 100644
--- a/vmm/src/config.rs
+++ b/vmm/src/config.rs
@@ -661,8 +661,8 @@ impl CpusConfig {
 }
 
 impl PciSegmentConfig {
-    pub const SYNTAX: &'static str = "PCI Segment parameters \
-         \"pci_segment=<segment_id>,mmio32_aperture_weight=<scale>,mmio64_aperture_weight=<scale>\"";
+    pub const SYNTAX: &'static str = "PCI segment parameters: \
+         pci_segment=<segment_id>,mmio32_aperture_weight=<scale>,mmio64_aperture_weight=<scale>";
 
     pub fn parse(disk: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -978,10 +978,10 @@ impl MemoryConfig {
 }
 
 impl RateLimiterGroupConfig {
-    pub const SYNTAX: &'static str = "Rate Limit Group parameters \
-        \"bw_size=<bytes>,bw_one_time_burst=<bytes>,bw_refill_time=<ms>,\
+    pub const SYNTAX: &'static str = "Rate limiter parameters: \
+        bw_size=<bytes>,bw_one_time_burst=<bytes>,bw_refill_time=<ms>,\
         ops_size=<io_ops>,ops_one_time_burst=<io_ops>,ops_refill_time=<ms>,\
-        id=<device_id>\"";
+        id=<device_id>";
 
     pub fn parse(rate_limit_group: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -1065,8 +1065,8 @@ impl RateLimiterGroupConfig {
 }
 
 impl DiskConfig {
-    pub const SYNTAX: &'static str = "Disk parameters \
-         \"path=<disk_image_path>,readonly=on|off,direct=on|off,iommu=on|off,\
+    pub const SYNTAX: &'static str = "Disk parameters: \
+         path=<disk_image>,readonly=on|off,direct=on|off,iommu=on|off,\
          num_queues=<number_of_queues>,queue_size=<size_of_each_queue>,\
          vhost_user=on|off,socket=<vhost_user_socket_path>,\
          bw_size=<bytes>,bw_one_time_burst=<bytes>,bw_refill_time=<ms>,\
@@ -1292,13 +1292,13 @@ impl FromStr for VhostMode {
 }
 
 impl NetConfig {
-    pub const SYNTAX: &'static str = "Network parameters \
-    \"tap=<if_name>,ip=<ip_addr>,mask=<net_mask>,mac=<mac_addr>,fd=<fd1,fd2...>,iommu=on|off,\
+    pub const SYNTAX: &'static str = "Network parameters: \
+    tap=<if_name>,ip=<ip_addr>,mask=<net_mask>,mac=<mac_addr>,fd=<fd1>,<fd2>...,iommu=on|off,\
     num_queues=<number_of_queues>,queue_size=<size_of_each_queue>,id=<device_id>,\
     vhost_user=<vhost_user_enable>,socket=<vhost_user_socket_path>,vhost_mode=client|server,\
     bw_size=<bytes>,bw_one_time_burst=<bytes>,bw_refill_time=<ms>,\
     ops_size=<io_ops>,ops_one_time_burst=<io_ops>,ops_refill_time=<ms>,pci_segment=<segment_id>\
-    offload_tso=on|off,offload_ufo=on|off,offload_csum=on|off\"";
+    offload_tso=on|off,offload_ufo=on|off,offload_csum=on|off";
 
     pub fn parse(net: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -1541,8 +1541,8 @@ impl RngConfig {
 }
 
 impl BalloonConfig {
-    pub const SYNTAX: &'static str = "Balloon parameters \"size=<balloon_size>,deflate_on_oom=on|off,\
-        free_page_reporting=on|off\"";
+    pub const SYNTAX: &'static str = "Balloon parameters: size=<balloon_size>,deflate_on_oom=on|off,\
+        free_page_reporting=on|off";
 
     pub fn parse(balloon: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -1578,9 +1578,9 @@ impl BalloonConfig {
 }
 
 impl FsConfig {
-    pub const SYNTAX: &'static str = "virtio-fs parameters \
-    \"tag=<tag_name>,socket=<socket_path>,num_queues=<number_of_queues>,\
-    queue_size=<size_of_each_queue>,id=<device_id>,pci_segment=<segment_id>\"";
+    pub const SYNTAX: &'static str = "Virtio FS parameters: \
+    tag=<tag_name>,socket=<socket_path>,num_queues=<number_of_queues>,\
+    queue_size=<size_of_each_queue>,id=<device_id>,pci_segment=<segment_id>";
 
     pub fn parse(fs: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -1650,9 +1650,9 @@ impl FsConfig {
 
 #[cfg(feature = "fw_cfg")]
 impl FwCfgConfig {
-    pub const SYNTAX: &'static str = "Boot params to pass to FW CFG device \
-    \"e820=on|off,kernel=on|off,cmdline=on|off,initramfs=on|off,acpi_table=on|off, \
-    items=[name0=<backing_file_path>,file0=<file_path>:name1=<backing_file_path>,file1=<file_path>]\"";
+    pub const SYNTAX: &'static str = "FW CFG parameters: \
+    e820=on|off,kernel=on|off,cmdline=on|off,initramfs=on|off,acpi_table=on|off, \
+    items=[name0=<backing_file_path>,file0=<file_path>:name1=<backing_file_path>,file1=<file_path>]";
     pub fn parse(fw_cfg_config: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
         parser
@@ -1745,9 +1745,9 @@ impl FwCfgItem {
 }
 
 impl PmemConfig {
-    pub const SYNTAX: &'static str = "Persistent memory parameters \
-    \"file=<backing_file_path>,size=<persistent_memory_size>,iommu=on|off,\
-    discard_writes=on|off,id=<device_id>,pci_segment=<segment_id>\"";
+    pub const SYNTAX: &'static str = "Persistent memory parameters: \
+    file=<backing_file_path>,size=<persistent_memory_size>,iommu=on|off,\
+    discard_writes=on|off,id=<device_id>,pci_segment=<segment_id>";
 
     pub fn parse(pmem: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -1917,7 +1917,7 @@ impl DebugConsoleConfig {
 }
 
 impl DeviceConfig {
-    pub const SYNTAX: &'static str = "Direct device assignment parameters \"path=<device_path>,iommu=on|off,id=<device_id>,pci_segment=<segment_id>\"";
+    pub const SYNTAX: &'static str = "Device assignment parameters: path=<device_path>,iommu=on|off,id=<device_id>,pci_segment=<segment_id>";
 
     pub fn parse(device: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -1975,7 +1975,7 @@ impl DeviceConfig {
 
 impl UserDeviceConfig {
     pub const SYNTAX: &'static str =
-        "Userspace device socket=<socket_path>,id=<device_id>,pci_segment=<segment_id>\"";
+        "Userspace device parameters: socket=<socket_path>,id=<device_id>,pci_segment=<segment_id>";
 
     pub fn parse(user_device: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -2019,9 +2019,9 @@ impl UserDeviceConfig {
 }
 
 impl VdpaConfig {
-    pub const SYNTAX: &'static str = "vDPA device \
-        \"path=<device_path>,num_queues=<number_of_queues>,iommu=on|off,\
-        id=<device_id>,pci_segment=<segment_id>\"";
+    pub const SYNTAX: &'static str = "vDPA device parameters: \
+        path=<device_path>,num_queues=<number_of_queues>,iommu=on|off,\
+        id=<device_id>,pci_segment=<segment_id>";
 
     pub fn parse(vdpa: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -2080,8 +2080,8 @@ impl VdpaConfig {
 }
 
 impl VsockConfig {
-    pub const SYNTAX: &'static str = "Virtio VSOCK parameters \
-        \"cid=<context_id>,socket=<socket_path>,iommu=on|off,id=<device_id>,pci_segment=<segment_id>\"";
+    pub const SYNTAX: &'static str = "Virtio vsock parameters: \
+        cid=<context_id>,socket=<socket_path>,iommu=on|off,id=<device_id>,pci_segment=<segment_id>";
 
     pub fn parse(vsock: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -2140,10 +2140,10 @@ impl VsockConfig {
 }
 
 impl NumaConfig {
-    pub const SYNTAX: &'static str = "Settings related to a given NUMA node \
-        \"guest_numa_id=<node_id>,cpus=<cpus_id>,distances=<list_of_distances_to_destination_nodes>,\
+    pub const SYNTAX: &'static str = "NUMA parameters: \
+        guest_numa_id=<node_id>,cpus=<cpus_id>,distances=<list_of_distances_to_destination_nodes>,\
         memory_zones=<list_of_memory_zones>,\
-        pci_segments=<list_of_pci_segments>\"";
+        pci_segments=<list_of_pci_segments>";
 
     pub fn parse(numa: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -2251,13 +2251,9 @@ pub struct RestoreConfig {
 }
 
 impl RestoreConfig {
-    pub const SYNTAX: &'static str = "Restore from a VM snapshot. \
-        \nRestore parameters \"source_url=<source_url>,prefault=on|off,\
-        net_fds=<list_of_net_ids_with_their_associated_fds>\" \
-        \n`source_url` should be a valid URL (e.g file:///foo/bar or tcp://192.168.1.10/foo) \
-        \n`prefault` brings memory pages in when enabled (disabled by default) \
-        \n`net_fds` is a list of net ids with new file descriptors. \
-        Only net devices backed by FDs directly are needed as input.";
+    pub const SYNTAX: &'static str = "Restore from snapshot: \
+        source_url=<source_url>,prefault=on|off,\
+        net_fds=<list_of_net_ids_with_their_associated_fds>";
 
     pub fn parse(restore: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -2340,8 +2336,8 @@ impl RestoreConfig {
 }
 
 impl TpmConfig {
-    pub const SYNTAX: &'static str = "TPM device \
-        \"(UNIX Domain Socket from swtpm) socket=</path/to/a/socket>\"";
+    pub const SYNTAX: &'static str = "TPM device socket: \
+        socket=<path>";
 
     pub fn parse(tpm: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -2356,8 +2352,8 @@ impl TpmConfig {
 }
 
 impl LandlockConfig {
-    pub const SYNTAX: &'static str = "Landlock parameters \
-        \"path=<path/to/{file/dir}>,access=[rw]\"";
+    pub const SYNTAX: &'static str = "Landlock parameters: \
+        path=<path>,access=[rw]";
 
     pub fn parse(landlock_rule: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
@@ -2396,10 +2392,9 @@ impl LandlockConfig {
 
 #[cfg(feature = "ivshmem")]
 impl IvshmemConfig {
-    pub const SYNTAX: &'static str = "Ivshmem device. Specify the backend file path and size \
-    for the shared memory: \"path=</path/to/a/file>, size=<file_size>\" \
-    \nThe <file_size> must be a power of 2 (e.g., 2M, 4M, etc.), as it represents the size \
-    of the memory region mapped to the guest. Default size is 128M.";
+    pub const SYNTAX: &'static str = "Ivshmem device parameters: \
+    path=</path/to/a/file>, size=<file_size> \
+    \n<file_size> must be a power of 2; the default size is 128M.";
     pub fn parse(ivshmem: &str) -> Result<Self> {
         let mut parser = OptionParser::new();
         parser.add("path").add("size");
