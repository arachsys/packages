diff --git a/net_util/src/open_tap.rs b/net_util/src/open_tap.rs
index 4fc8851e..53782669 100644
--- a/net_util/src/open_tap.rs
+++ b/net_util/src/open_tap.rs
@@ -2,7 +2,6 @@
 //
 // SPDX-License-Identifier: Apache-2.0 AND BSD-3-Clause
 
-use std::net::Ipv4Addr;
 use std::path::Path;
 use std::{fs, io};
 
@@ -64,8 +63,6 @@ fn check_mq_support(if_name: &Option<&str>, queue_pairs: usize) -> Result<()> {
 /// netmask.
 pub fn open_tap(
     if_name: Option<&str>,
-    ip_addr: Option<Ipv4Addr>,
-    netmask: Option<Ipv4Addr>,
     host_mac: &mut Option<MacAddr>,
     mtu: Option<u16>,
     num_rx_q: usize,
@@ -74,8 +71,6 @@ pub fn open_tap(
     let mut taps: Vec<Tap> = Vec::new();
     let mut ifname: String = String::new();
     let vnet_hdr_size = vnet_hdr_len() as i32;
-    // Check if the given interface exists before we create it.
-    let tap_existed = if_name.is_some_and(|n| Path::new(&format!("/sys/class/net/{n}")).exists());
 
     // In case the tap interface already exists, check if the number of
     // queues is appropriate. The tap might not support multiqueue while
@@ -91,20 +86,6 @@ pub fn open_tap(
                 Some(name) => Tap::open_named(name, num_rx_q, flags).map_err(Error::TapOpen)?,
                 None => Tap::new(num_rx_q).map_err(Error::TapOpen)?,
             };
-            // Don't overwrite ip configuration of existing interfaces:
-            if !tap_existed {
-                if let Some(ip) = ip_addr {
-                    tap.set_ip_addr(ip).map_err(Error::TapSetIp)?;
-                }
-                if let Some(mask) = netmask {
-                    tap.set_netmask(mask).map_err(Error::TapSetNetmask)?;
-                }
-            } else {
-                warn!(
-                    "Tap {} already exists. IP configuration will not be overwritten.",
-                    if_name.unwrap_or_default()
-                );
-            }
             if let Some(mac) = host_mac {
                 tap.set_mac_addr(*mac).map_err(Error::TapSetMac)?
             } else {
diff --git a/vhost_user_net/src/lib.rs b/vhost_user_net/src/lib.rs
index 97449aaa..52ca9570 100644
--- a/vhost_user_net/src/lib.rs
+++ b/vhost_user_net/src/lib.rs
@@ -6,7 +6,6 @@
 //
 // SPDX-License-Identifier: (Apache-2.0 AND BSD-3-Clause)
 
-use std::net::Ipv4Addr;
 use std::ops::Deref;
 use std::os::unix::io::{AsRawFd, RawFd};
 use std::sync::{Arc, Mutex, RwLock};
@@ -56,7 +55,7 @@ pub enum Error {
 }
 
 pub const SYNTAX: &str = "vhost-user-net backend parameters \
-\"ip=<ip_addr>,mask=<net_mask>,socket=<socket_path>,client=on|off,\
+\"socket=<socket_path>,client=on|off,\
 num_queues=<number_of_queues>,queue_size=<size_of_each_queue>,tap=<if_name>\"";
 
 impl fmt::Display for Error {
@@ -118,9 +117,7 @@ pub struct VhostUserNetBackend {
 impl VhostUserNetBackend {
     #[allow(clippy::too_many_arguments)]
     fn new(
-        ip_addr: Ipv4Addr,
         host_mac: MacAddr,
-        netmask: Ipv4Addr,
         mtu: Option<u16>,
         num_queues: usize,
         queue_size: u16,
@@ -129,8 +126,6 @@ impl VhostUserNetBackend {
     ) -> Result<Self> {
         let mut taps = open_tap(
             ifname,
-            Some(ip_addr),
-            Some(netmask),
             &mut Some(host_mac),
             mtu,
             num_queues / 2,
@@ -271,9 +266,7 @@ impl VhostUserBackendMut for VhostUserNetBackend {
 }
 
 pub struct VhostUserNetBackendConfig {
-    pub ip: Ipv4Addr,
     pub host_mac: MacAddr,
-    pub mask: Ipv4Addr,
     pub mtu: Option<u16>,
     pub socket: String,
     pub num_queues: usize,
@@ -288,9 +281,7 @@ impl VhostUserNetBackendConfig {
 
         parser
             .add("tap")
-            .add("ip")
             .add("host_mac")
-            .add("mask")
             .add("mtu")
             .add("queue_size")
             .add("num_queues")
@@ -300,18 +291,10 @@ impl VhostUserNetBackendConfig {
         parser.parse(backend).map_err(Error::FailedConfigParse)?;
 
         let tap = parser.get("tap");
-        let ip = parser
-            .convert("ip")
-            .map_err(Error::FailedConfigParse)?
-            .unwrap_or_else(|| Ipv4Addr::new(192, 168, 100, 1));
         let host_mac = parser
             .convert("host_mac")
             .map_err(Error::FailedConfigParse)?
             .unwrap_or_else(MacAddr::local_random);
-        let mask = parser
-            .convert("mask")
-            .map_err(Error::FailedConfigParse)?
-            .unwrap_or_else(|| Ipv4Addr::new(255, 255, 255, 0));
         let mtu = parser.convert("mtu").map_err(Error::FailedConfigParse)?;
         let queue_size = parser
             .convert("queue_size")
@@ -329,9 +312,7 @@ impl VhostUserNetBackendConfig {
             .0;
 
         Ok(VhostUserNetBackendConfig {
-            ip,
             host_mac,
-            mask,
             mtu,
             socket,
             num_queues,
@@ -357,9 +338,7 @@ pub fn start_net_backend(backend_command: &str) {
 
     let net_backend = Arc::new(RwLock::new(
         VhostUserNetBackend::new(
-            backend_config.ip,
             backend_config.host_mac,
-            backend_config.mask,
             backend_config.mtu,
             backend_config.num_queues,
             backend_config.queue_size,
diff --git a/virtio-devices/src/net.rs b/virtio-devices/src/net.rs
index 5fba6f7d..26b24935 100644
--- a/virtio-devices/src/net.rs
+++ b/virtio-devices/src/net.rs
@@ -6,7 +6,6 @@
 // found in the THIRD-PARTY file.
 
 use std::collections::HashMap;
-use std::net::Ipv4Addr;
 use std::num::Wrapping;
 use std::ops::Deref;
 use std::os::unix::io::{AsRawFd, RawFd};
@@ -545,8 +544,6 @@ impl Net {
     pub fn new(
         id: String,
         if_name: Option<&str>,
-        ip_addr: Option<Ipv4Addr>,
-        netmask: Option<Ipv4Addr>,
         guest_mac: Option<MacAddr>,
         host_mac: &mut Option<MacAddr>,
         mtu: Option<u16>,
@@ -563,8 +560,6 @@ impl Net {
     ) -> Result<Self> {
         let taps = open_tap(
             if_name,
-            ip_addr,
-            netmask,
             host_mac,
             mtu,
             num_queues / 2,
diff --git a/vmm/src/config.rs b/vmm/src/config.rs
index 9ba0dba0..4f511bd6 100644
--- a/vmm/src/config.rs
+++ b/vmm/src/config.rs
@@ -1350,7 +1350,7 @@ impl FromStr for VhostMode {
 
 impl NetConfig {
     pub const SYNTAX: &'static str = "Network parameters: \
-    tap=<if_name>,ip=<ip_addr>,mask=<net_mask>,mac=<mac_addr>,fd=<fd1>,<fd2>...,iommu=on|off,\
+    tap=<if_name>,mac=<mac_addr>,fd=<fd1>,<fd2>...,iommu=on|off,\
     num_queues=<number_of_queues>,queue_size=<size_of_each_queue>,id=<device_id>,\
     vhost_user=<vhost_user_enable>,socket=<vhost_user_socket_path>,vhost_mode=client|server,\
     bw_size=<bytes>,bw_one_time_burst=<bytes>,bw_refill_time=<ms>,\
@@ -1362,8 +1362,6 @@ impl NetConfig {
 
         parser
             .add("tap")
-            .add("ip")
-            .add("mask")
             .add("mac")
             .add("host_mac")
             .add("offload_tso")
@@ -1388,14 +1386,6 @@ impl NetConfig {
         parser.parse(net).map_err(Error::ParseNetwork)?;
 
         let tap = parser.get("tap");
-        let ip = parser
-            .convert("ip")
-            .map_err(Error::ParseNetwork)?
-            .unwrap_or_else(default_netconfig_ip);
-        let mask = parser
-            .convert("mask")
-            .map_err(Error::ParseNetwork)?
-            .unwrap_or_else(default_netconfig_mask);
         let mac = parser
             .convert("mac")
             .map_err(Error::ParseNetwork)?
@@ -1502,8 +1492,6 @@ impl NetConfig {
 
         let config = NetConfig {
             tap,
-            ip,
-            mask,
             mac,
             host_mac,
             mtu,
diff --git a/vmm/src/device_manager.rs b/vmm/src/device_manager.rs
index 8b3c20e5..54c19e8b 100644
--- a/vmm/src/device_manager.rs
+++ b/vmm/src/device_manager.rs
@@ -2523,8 +2523,6 @@ impl DeviceManager {
                     virtio_devices::Net::new(
                         id.clone(),
                         Some(tap_if_name),
-                        Some(net_cfg.ip),
-                        Some(net_cfg.mask),
                         Some(net_cfg.mac),
                         &mut net_cfg.host_mac,
                         net_cfg.mtu,
@@ -2574,8 +2572,6 @@ impl DeviceManager {
                     virtio_devices::Net::new(
                         id.clone(),
                         None,
-                        Some(net_cfg.ip),
-                        Some(net_cfg.mask),
                         Some(net_cfg.mac),
                         &mut net_cfg.host_mac,
                         net_cfg.mtu,
diff --git a/vmm/src/vm_config.rs b/vmm/src/vm_config.rs
index 52ace1fd..47005552 100644
--- a/vmm/src/vm_config.rs
+++ b/vmm/src/vm_config.rs
@@ -2,7 +2,6 @@
 //
 // SPDX-License-Identifier: Apache-2.0
 //
-use std::net::Ipv4Addr;
 use std::path::PathBuf;
 use std::{fs, result};
 
@@ -293,10 +292,6 @@ pub fn default_diskconfig_queue_size() -> u16 {
 pub struct NetConfig {
     #[serde(default = "default_netconfig_tap")]
     pub tap: Option<String>,
-    #[serde(default = "default_netconfig_ip")]
-    pub ip: Ipv4Addr,
-    #[serde(default = "default_netconfig_mask")]
-    pub mask: Ipv4Addr,
     #[serde(default = "default_netconfig_mac")]
     pub mac: MacAddr,
     #[serde(default)]
@@ -342,14 +337,6 @@ pub fn default_netconfig_tap() -> Option<String> {
     None
 }
 
-pub fn default_netconfig_ip() -> Ipv4Addr {
-    Ipv4Addr::new(192, 168, 249, 1)
-}
-
-pub fn default_netconfig_mask() -> Ipv4Addr {
-    Ipv4Addr::new(255, 255, 255, 0)
-}
-
 pub fn default_netconfig_mac() -> MacAddr {
     MacAddr::local_random()
 }
