diff --git a/net_util/src/open_tap.rs b/net_util/src/open_tap.rs
index 4276012d..1c16e599 100644
--- a/net_util/src/open_tap.rs
+++ b/net_util/src/open_tap.rs
@@ -3,7 +3,6 @@
 // SPDX-License-Identifier: Apache-2.0 AND BSD-3-Clause
 
 use super::{vnet_hdr_len, MacAddr, Tap, TapError};
-use std::net::Ipv4Addr;
 use std::path::Path;
 use std::{fs, io};
 use thiserror::Error;
@@ -62,8 +61,6 @@ fn check_mq_support(if_name: &Option<&str>, queue_pairs: usize) -> Result<()> {
 /// netmask.
 pub fn open_tap(
     if_name: Option<&str>,
-    ip_addr: Option<Ipv4Addr>,
-    netmask: Option<Ipv4Addr>,
     host_mac: &mut Option<MacAddr>,
     mtu: Option<u16>,
     num_rx_q: usize,
@@ -72,10 +69,6 @@ pub fn open_tap(
     let mut taps: Vec<Tap> = Vec::new();
     let mut ifname: String = String::new();
     let vnet_hdr_size = vnet_hdr_len() as i32;
-    // Check if the given interface exists before we create it.
-    let tap_existed = if_name.map_or(false, |n| {
-        Path::new(&format!("/sys/class/net/{n}")).exists()
-    });
 
     // In case the tap interface already exists, check if the number of
     // queues is appropriate. The tap might not support multiqueue while
@@ -91,20 +84,6 @@ pub fn open_tap(
                 Some(name) => Tap::open_named(name, num_rx_q, flags).map_err(Error::TapOpen)?,
                 None => Tap::new(num_rx_q).map_err(Error::TapOpen)?,
             };
-            // Don't overwrite ip configuration of existing interfaces:
-            if !tap_existed {
-                if let Some(ip) = ip_addr {
-                    tap.set_ip_addr(ip).map_err(Error::TapSetIp)?;
-                }
-                if let Some(mask) = netmask {
-                    tap.set_netmask(mask).map_err(Error::TapSetNetmask)?;
-                }
-            } else {
-                warn!(
-                    "Tap {} already exists. IP configuration will not be overwritten.",
-                    if_name.unwrap_or_default()
-                );
-            }
             if let Some(mac) = host_mac {
                 tap.set_mac_addr(*mac).map_err(Error::TapSetMac)?
             } else {
diff --git a/vhost_user_net/src/lib.rs b/vhost_user_net/src/lib.rs
index cd418846..cbcf8640 100644
--- a/vhost_user_net/src/lib.rs
+++ b/vhost_user_net/src/lib.rs
@@ -15,7 +15,6 @@ use option_parser::Toggle;
 use option_parser::{OptionParser, OptionParserError};
 use std::fmt;
 use std::io;
-use std::net::Ipv4Addr;
 use std::ops::Deref;
 use std::os::unix::io::{AsRawFd, RawFd};
 use std::process;
@@ -58,7 +57,7 @@ pub enum Error {
 }
 
 pub const SYNTAX: &str = "vhost-user-net backend parameters \
-\"ip=<ip_addr>,mask=<net_mask>,socket=<socket_path>,client=on|off,\
+\"socket=<socket_path>,client=on|off,\
 num_queues=<number_of_queues>,queue_size=<size_of_each_queue>,tap=<if_name>\"";
 
 impl fmt::Display for Error {
@@ -120,9 +119,7 @@ pub struct VhostUserNetBackend {
 impl VhostUserNetBackend {
     #[allow(clippy::too_many_arguments)]
     fn new(
-        ip_addr: Ipv4Addr,
         host_mac: MacAddr,
-        netmask: Ipv4Addr,
         mtu: Option<u16>,
         num_queues: usize,
         queue_size: u16,
@@ -131,8 +128,6 @@ impl VhostUserNetBackend {
     ) -> Result<Self> {
         let mut taps = open_tap(
             ifname,
-            Some(ip_addr),
-            Some(netmask),
             &mut Some(host_mac),
             mtu,
             num_queues / 2,
@@ -290,9 +285,7 @@ impl VhostUserNetBackendConfig {
 
         parser
             .add("tap")
-            .add("ip")
             .add("host_mac")
-            .add("mask")
             .add("mtu")
             .add("queue_size")
             .add("num_queues")
@@ -302,18 +295,10 @@ impl VhostUserNetBackendConfig {
         parser.parse(backend).map_err(Error::FailedConfigParse)?;
 
         let tap = parser.get("tap");
-        let ip = parser
-            .convert("ip")
-            .map_err(Error::FailedConfigParse)?
-            .unwrap_or_else(|| Ipv4Addr::new(192, 168, 100, 1));
         let host_mac = parser
             .convert("host_mac")
             .map_err(Error::FailedConfigParse)?
             .unwrap_or_else(MacAddr::local_random);
-        let mask = parser
-            .convert("mask")
-            .map_err(Error::FailedConfigParse)?
-            .unwrap_or_else(|| Ipv4Addr::new(255, 255, 255, 0));
         let mtu = parser.convert("mtu").map_err(Error::FailedConfigParse)?;
         let queue_size = parser
             .convert("queue_size")
@@ -331,9 +316,7 @@ impl VhostUserNetBackendConfig {
             .0;
 
         Ok(VhostUserNetBackendConfig {
-            ip,
             host_mac,
-            mask,
             mtu,
             socket,
             num_queues,
@@ -359,9 +342,7 @@ pub fn start_net_backend(backend_command: &str) {
 
     let net_backend = Arc::new(RwLock::new(
         VhostUserNetBackend::new(
-            backend_config.ip,
             backend_config.host_mac,
-            backend_config.mask,
             backend_config.mtu,
             backend_config.num_queues,
             backend_config.queue_size,
diff --git a/virtio-devices/src/net.rs b/virtio-devices/src/net.rs
index 6a5de713..0798dee4 100644
--- a/virtio-devices/src/net.rs
+++ b/virtio-devices/src/net.rs
@@ -24,7 +24,6 @@ use net_util::{
     NetQueuePair, OpenTapError, RxVirtio, Tap, TapError, TxVirtio, VirtioNetConfig,
 };
 use seccompiler::SeccompAction;
-use std::net::Ipv4Addr;
 use std::num::Wrapping;
 use std::ops::Deref;
 use std::os::unix::io::{AsRawFd, RawFd};
@@ -552,8 +551,6 @@ impl Net {
     pub fn new(
         id: String,
         if_name: Option<&str>,
-        ip_addr: Option<Ipv4Addr>,
-        netmask: Option<Ipv4Addr>,
         guest_mac: Option<MacAddr>,
         host_mac: &mut Option<MacAddr>,
         mtu: Option<u16>,
@@ -570,8 +567,6 @@ impl Net {
     ) -> Result<Self> {
         let taps = open_tap(
             if_name,
-            ip_addr,
-            netmask,
             host_mac,
             mtu,
             num_queues / 2,
diff --git a/vmm/src/config.rs b/vmm/src/config.rs
index 058cc2cc..4606a506 100644
--- a/vmm/src/config.rs
+++ b/vmm/src/config.rs
@@ -1207,7 +1207,7 @@ impl FromStr for VhostMode {
 
 impl NetConfig {
     pub const SYNTAX: &'static str = "Network parameters: \
-    tap=<if_name>,ip=<ip_addr>,mask=<net_mask>,mac=<mac_addr>,fd=<fd1>,<fd2>...,iommu=on|off,\
+    tap=<if_name>,mac=<mac_addr>,fd=<fd1>,<fd2>...,iommu=on|off,\
     num_queues=<number_of_queues>,queue_size=<size_of_each_queue>,id=<device_id>,\
     vhost_user=<vhost_user_enable>,socket=<vhost_user_socket_path>,vhost_mode=client|server,\
     bw_size=<bytes>,bw_one_time_burst=<bytes>,bw_refill_time=<ms>,\
@@ -1219,8 +1219,6 @@ impl NetConfig {
 
         parser
             .add("tap")
-            .add("ip")
-            .add("mask")
             .add("mac")
             .add("host_mac")
             .add("offload_tso")
@@ -1245,14 +1243,6 @@ impl NetConfig {
         parser.parse(net).map_err(Error::ParseNetwork)?;
 
         let tap = parser.get("tap");
-        let ip = parser
-            .convert("ip")
-            .map_err(Error::ParseNetwork)?
-            .unwrap_or_else(default_netconfig_ip);
-        let mask = parser
-            .convert("mask")
-            .map_err(Error::ParseNetwork)?
-            .unwrap_or_else(default_netconfig_mask);
         let mac = parser
             .convert("mac")
             .map_err(Error::ParseNetwork)?
@@ -1359,8 +1349,6 @@ impl NetConfig {
 
         let config = NetConfig {
             tap,
-            ip,
-            mask,
             mac,
             host_mac,
             mtu,
diff --git a/vmm/src/device_manager.rs b/vmm/src/device_manager.rs
index 6c8e5bc9..36a8174d 100644
--- a/vmm/src/device_manager.rs
+++ b/vmm/src/device_manager.rs
@@ -2654,8 +2654,6 @@ impl DeviceManager {
                     virtio_devices::Net::new(
                         id.clone(),
                         Some(tap_if_name),
-                        Some(net_cfg.ip),
-                        Some(net_cfg.mask),
                         Some(net_cfg.mac),
                         &mut net_cfg.host_mac,
                         net_cfg.mtu,
@@ -2705,8 +2703,6 @@ impl DeviceManager {
                     virtio_devices::Net::new(
                         id.clone(),
                         None,
-                        Some(net_cfg.ip),
-                        Some(net_cfg.mask),
                         Some(net_cfg.mac),
                         &mut net_cfg.host_mac,
                         net_cfg.mtu,
diff --git a/vmm/src/vm_config.rs b/vmm/src/vm_config.rs
index 51e7847e..6d9ffdc8 100644
--- a/vmm/src/vm_config.rs
+++ b/vmm/src/vm_config.rs
@@ -4,7 +4,7 @@
 //
 use net_util::MacAddr;
 use serde::{Deserialize, Serialize};
-use std::{net::Ipv4Addr, path::PathBuf};
+use std::path::PathBuf;
 use virtio_devices::RateLimiterConfig;
 
 #[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
@@ -245,10 +245,6 @@ pub fn default_diskconfig_queue_size() -> u16 {
 pub struct NetConfig {
     #[serde(default = "default_netconfig_tap")]
     pub tap: Option<String>,
-    #[serde(default = "default_netconfig_ip")]
-    pub ip: Ipv4Addr,
-    #[serde(default = "default_netconfig_mask")]
-    pub mask: Ipv4Addr,
     #[serde(default = "default_netconfig_mac")]
     pub mac: MacAddr,
     #[serde(default)]
@@ -290,14 +286,6 @@ pub fn default_netconfig_tap() -> Option<String> {
     None
 }
 
-pub fn default_netconfig_ip() -> Ipv4Addr {
-    Ipv4Addr::new(192, 168, 249, 1)
-}
-
-pub fn default_netconfig_mask() -> Ipv4Addr {
-    Ipv4Addr::new(255, 255, 255, 0)
-}
-
 pub fn default_netconfig_mac() -> MacAddr {
     MacAddr::local_random()
 }
