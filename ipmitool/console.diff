diff --git a/lib/ipmi_isol.c b/lib/ipmi_isol.c
index bc0b08b..aa47d15 100644
--- a/lib/ipmi_isol.c
+++ b/lib/ipmi_isol.c
@@ -365,23 +365,15 @@ suspendSelf(int bRestoreTty)
 static void
 printiSolEscapeSequences(void)
 {
-	printf(
-		   "%c?\n\
-	Supported escape sequences:\n\
-	%c.  - terminate connection\n\
-	%c^Z - suspend ipmitool\n\
-	%c^X - suspend ipmitool, but don't restore tty on restart\n\
-	%cB  - send break\n\
-	%c?  - this message\n\
-	%c%c  - send the escape character by typing it twice\n\
-	(Note that escapes are only recognized immediately after newline.)\n",
-		   ISOL_ESCAPE_CHARACTER,
-		   ISOL_ESCAPE_CHARACTER,
-		   ISOL_ESCAPE_CHARACTER,
-		   ISOL_ESCAPE_CHARACTER,
-		   ISOL_ESCAPE_CHARACTER,
-		   ISOL_ESCAPE_CHARACTER,
-		   ISOL_ESCAPE_CHARACTER,
+	printf("%1$c?\r\n\
+Supported escape sequences:\r\n\
+ %1$c.  - terminate connection\r\n\
+ %1$c^Z - suspend ipmitool\r\n\
+ %1$c^X - suspend ipmitool, but don't restore tty on restart\r\n\
+ %1$cB  - send break\r\n\
+ %1$c?  - this message\r\n\
+ %1$c%1$c  - send the escape character by typing it twice\r\n\
+(Note that escapes are only recognized immediately after newline.)\r\n",
 		   ISOL_ESCAPE_CHARACTER);
 }
 
@@ -484,21 +476,21 @@ processiSolUserInput(struct ipmi_intf * intf,
 			 */
 			switch (ch) {
 			case '.':
-				printf("%c. [terminated ipmitool]\n", ISOL_ESCAPE_CHARACTER);
+				printf("%c. [terminated ipmitool]\r\n", ISOL_ESCAPE_CHARACTER);
 				retval = 1;
 				break;
 			case 'Z' - 64:
-				printf("%c^Z [suspend ipmitool]\n", ISOL_ESCAPE_CHARACTER);
+				printf("%c^Z [suspend ipmitool]\r\n", ISOL_ESCAPE_CHARACTER);
 				suspendSelf(1); /* Restore tty back to raw */
 				continue;
 
 			case 'X' - 64:
-				printf("%c^X [suspend ipmitool]\n", ISOL_ESCAPE_CHARACTER);
+				printf("%c^X [suspend ipmitool]\r\n", ISOL_ESCAPE_CHARACTER);
 				suspendSelf(0); /* Don't restore to raw mode */
 				continue;
 
 			case 'B':
-				printf("%cb [send break]\n", ISOL_ESCAPE_CHARACTER);
+				printf("%cb [send break]\r\n", ISOL_ESCAPE_CHARACTER);
 				sendBreak(intf);
 				continue;
 
diff --git a/lib/ipmi_sol.c b/lib/ipmi_sol.c
index 3acd5bb..17a4884 100644
--- a/lib/ipmi_sol.c
+++ b/lib/ipmi_sol.c
@@ -1199,6 +1199,18 @@ sendBreak(struct ipmi_intf * intf)
 	intf->send_sol(intf, &v2_payload);
 }
 
+static void
+sendReset(struct ipmi_intf * intf)
+{
+	struct ipmi_rq req;
+	memset(&req, 0, sizeof(req));
+	req.msg.netfn = IPMI_NETFN_CHASSIS;
+	req.msg.cmd = 0x02;
+	req.msg.data = &(uint8_t) { IPMI_CHASSIS_CTL_HARD_RESET };
+	req.msg.data_len = 1;
+	intf->sendrecv(intf, &req);
+}
+
 
 
 /*
@@ -1229,23 +1241,16 @@ suspendSelf(int bRestoreTty)
 static void
 printSolEscapeSequences(struct ipmi_intf * intf)
 {
-	printf(
-		   "%c?\n\
-	Supported escape sequences:\n\
-	%c.  - terminate connection\n\
-	%c^Z - suspend ipmitool\n\
-	%c^X - suspend ipmitool, but don't restore tty on restart\n\
-	%cB  - send break\n\
-	%c?  - this message\n\
-	%c%c  - send the escape character by typing it twice\n\
-	(Note that escapes are only recognized immediately after newline.)\n",
-		   intf->ssn_params.sol_escape_char,
-		   intf->ssn_params.sol_escape_char,
-		   intf->ssn_params.sol_escape_char,
-		   intf->ssn_params.sol_escape_char,
-		   intf->ssn_params.sol_escape_char,
-		   intf->ssn_params.sol_escape_char,
-		   intf->ssn_params.sol_escape_char,
+	printf("%1$c?\r\n\
+Supported escape sequences:\r\n\
+ %1$c.  - terminate connection\r\n\
+ %1$c^Z - suspend ipmitool\r\n\
+ %1$c^X - suspend ipmitool, but don't restore tty on restart\r\n\
+ %1$cB  - send break\r\n\
+ %1$cR  - send reset\r\n\
+ %1$c?  - this message\r\n\
+ %1$c%1$c  - send the escape character by typing it twice\r\n\
+(Note that escapes are only recognized immediately after newline.)\r\n",
 		   intf->ssn_params.sol_escape_char);
 }
 
@@ -1382,29 +1387,35 @@ processSolUserInput(
 			 */
 			switch (ch) {
 			case '.':
-				printf("%c. [terminated ipmitool]\n",
+				printf("%c. [terminated ipmitool]\r\n",
 				       intf->ssn_params.sol_escape_char);
 				retval = 1;
 				break;
 
 			case 'Z' - 64:
-				printf("%c^Z [suspend ipmitool]\n",
+				printf("%c^Z [suspend ipmitool]\r\n",
 				       intf->ssn_params.sol_escape_char);
 				suspendSelf(1); /* Restore tty back to raw */
 				continue;
 
 			case 'X' - 64:
-				printf("%c^Z [suspend ipmitool]\n",
+				printf("%c^Z [suspend ipmitool]\r\n",
 				       intf->ssn_params.sol_escape_char);
 				suspendSelf(0); /* Don't restore to raw mode */
 				continue;
 
 			case 'B':
-				printf("%cB [send break]\n",
+				printf("%cB [send break]\r\n",
 				       intf->ssn_params.sol_escape_char);
 				sendBreak(intf);
 				continue;
 
+			case 'R':
+				printf("%cR [send reset]\r\n",
+				       intf->ssn_params.sol_escape_char);
+				sendReset(intf);
+				continue;
+
 			case '?':
 				printSolEscapeSequences(intf);
 				continue;
diff --git a/lib/ipmi_tsol.c b/lib/ipmi_tsol.c
index d89bcfd..fceed8c 100644
--- a/lib/ipmi_tsol.c
+++ b/lib/ipmi_tsol.c
@@ -179,17 +179,12 @@ static void
 print_escape_seq(struct ipmi_intf *intf)
 {
 	lprintf(LOG_NOTICE,
-"       %c.  - terminate connection\n"
-"       %c^Z - suspend ipmitool\n"
-"       %c^X - suspend ipmitool, but don't restore tty on restart\n"
-"       %c?  - this message\n"
-"       %c%c  - send the escape character by typing it twice\n"
-"       (Note that escapes are only recognized immediately after newline.)",
-			intf->ssn_params.sol_escape_char,
-			intf->ssn_params.sol_escape_char,
-			intf->ssn_params.sol_escape_char,
-			intf->ssn_params.sol_escape_char,
-			intf->ssn_params.sol_escape_char,
+" %1$c.  - terminate connection\r\n"
+" %1$c^Z - suspend ipmitool\r\n"
+" %1$c^X - suspend ipmitool, but don't restore tty on restart\r\n"
+" %1$c?  - this message\r\n"
+" %1$c%1$c  - send the escape character by typing it twice\r\n"
+"(Note that escapes are only recognized immediately after newline.)",
 			intf->ssn_params.sol_escape_char);
 }
 
@@ -280,23 +275,23 @@ do_inbuf_actions(struct ipmi_intf *intf, char *in_buff, int len)
 
 			switch (in_buff[i]) {
 			case '.':
-				printf("%c. [terminated ipmitool]\n",
+				printf("%c. [terminated ipmitool]\r\n",
 						intf->ssn_params.sol_escape_char);
 				return -1;
 			case 'Z' - 64:
-				printf("%c^Z [suspend ipmitool]\n",
+				printf("%c^Z [suspend ipmitool]\r\n",
 						intf->ssn_params.sol_escape_char);
 				/* Restore tty back to raw */
 				suspend_self(1);
 				break;
 			case 'X' - 64:
-				printf("%c^X [suspend ipmitool]\n",
+				printf("%c^X [suspend ipmitool]\r\n",
 						intf->ssn_params.sol_escape_char);
 				/* Don't restore to raw mode */
 				suspend_self(0);
 				break;
 			case '?':
-				printf("%c? [ipmitool help]\n",
+				printf("%c? [ipmitool help]\r\n",
 						intf->ssn_params.sol_escape_char);
 				print_escape_seq(intf);
 				break;
@@ -486,9 +481,6 @@ ipmi_tsol_main(struct ipmi_intf *intf, int argc, char **argv)
 	printf("[Starting %sSOL with receiving address %s:%d]\n",
 			read_only ? "Read-only " : "", recvip, port);
 
-	set_terminal_size(rows, cols);
-	enter_raw_mode();
-
 	/*
 	 * talk to smdc to start Console redirect - IP address and port as parameter
 	 * ipmitool -I lan -H 192.168.168.227 -U Administrator raw 0x30 0x06 0xC0 0xA8 0xA8 0x78 0x1A 0x0A
@@ -503,6 +495,8 @@ ipmi_tsol_main(struct ipmi_intf *intf, int argc, char **argv)
 	printf("[SOL Session operational.  Use %c? for help]\n",
 			intf->ssn_params.sol_escape_char);
 
+	set_terminal_size(rows, cols);
+	enter_raw_mode();
 	gettimeofday(&_start_keepalive, 0);
 
 	fds_wait[0].fd = fd_socket;
