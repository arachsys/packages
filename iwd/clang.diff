diff --git a/ell/dbus-filter.c b/ell/dbus-filter.c
index fd61b7c..b9522b5 100644
--- a/ell/dbus-filter.c
+++ b/ell/dbus-filter.c
@@ -309,8 +309,6 @@ unsigned int _dbus_filter_add_rule(struct _dbus_filter *filter,
 
 		}
 
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 		/*
 		 * Mark the condition used.  We do this by setting
 		 * condition->type to an invalid value unless it is the
@@ -332,7 +330,6 @@ _Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 		 * have yet created an AddMatch rule on the server.
 		 */
 		remote_rule |= node->match.remote_rule;
-_Pragma("GCC diagnostic pop")
 	}
 
 	node = l_new(struct filter_node, 1);
@@ -349,11 +346,8 @@ _Pragma("GCC diagnostic pop")
 						rule, rule_len))
 			goto err;
 
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 		parent->id = node->id;
 		parent->match.remote_rule = true;
-_Pragma("GCC diagnostic pop")
 	}
 
 	return node->id;
diff --git a/ell/missing.h b/ell/missing.h
index 11d6a8e..c9755c5 100644
--- a/ell/missing.h
+++ b/ell/missing.h
@@ -71,9 +71,6 @@ static inline void explicit_bzero(void *s, size_t n)
 #ifndef HAVE_RAWMEMCHR
 static inline void *rawmemchr(const void *s, int c)
 {
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wstringop-overflow=\"")
 	return memchr(s, c, PTRDIFF_MAX);
-_Pragma("GCC diagnostic pop")
 }
 #endif
diff --git a/src/eap.c b/src/eap.c
index 6f523f2..a56e497 100644
--- a/src/eap.c
+++ b/src/eap.c
@@ -413,11 +413,8 @@ static const char *eap_type_to_str(enum eap_type type, uint32_t vendor_id,
 	return buf;
 }
 
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 #define IS_EXPANDED_RESPONSE(id, t) \
 	(type == EAP_TYPE_EXPANDED && vendor_id == (id) && vendor_type == (t))
-_Pragma("GCC diagnostic pop")
 
 #define RESPONSE_IS(t) \
 	(type == (t) || IS_EXPANDED_RESPONSE(0, (t)))
diff --git a/src/eapol.c b/src/eapol.c
index e8bd5cd..e155ab4 100644
--- a/src/eapol.c
+++ b/src/eapol.c
@@ -1049,7 +1049,7 @@ static void eapol_set_key_timeout(struct eapol_sm *sm,
  * around this by dropping to O0 for this function when old GCC versions
  * are used
  */
-#if __GNUC__ < 9
+#if __GNUC__ < 9 && !defined(__clang__)
 #pragma GCC optimize ("O0")
 #endif
 
@@ -1096,7 +1096,7 @@ static void eapol_send_ptk_1_of_4(struct eapol_sm *sm)
 	eapol_sm_write(sm, (struct eapol_frame *) ek, false);
 }
 
-#if __GNUC__ < 9
+#if __GNUC__ < 9 && !defined(__clang__)
 #pragma GCC reset_options
 #endif
 
diff --git a/src/missing.h b/src/missing.h
index a5b9295..a65800f 100644
--- a/src/missing.h
+++ b/src/missing.h
@@ -31,10 +31,7 @@ static inline void explicit_bzero(void *s, size_t n)
 #ifndef HAVE_RAWMEMCHR
 static inline void *rawmemchr(const void *s, int c)
 {
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wstringop-overflow=\"")
 	return memchr(s, c, (size_t) -1);
-_Pragma("GCC diagnostic pop")
 }
 #endif
 
