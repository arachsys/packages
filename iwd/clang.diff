diff --git a/ell/cert-crypto.c b/ell/cert-crypto.c
index b19f85c5..f2bf1dc6 100644
--- a/ell/cert-crypto.c
+++ b/ell/cert-crypto.c
@@ -221,8 +221,6 @@ uint8_t *cert_pkcs12_pbkdf(const char *password,
 		ptr += s_len + salt_len - j;
 	}
 
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 	if (p_len) {
 		for (j = passwd_len; j < p_len;
 					j += passwd_len, ptr += passwd_len)
@@ -233,7 +231,6 @@ _Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 		explicit_bzero(bmpstring, passwd_len);
 		l_free(bmpstring);
 	}
-_Pragma("GCC diagnostic pop")
 
 	key = l_malloc(key_len + hash->len);
 
diff --git a/ell/dbus-filter.c b/ell/dbus-filter.c
index 7853c2b0..d93daf53 100644
--- a/ell/dbus-filter.c
+++ b/ell/dbus-filter.c
@@ -294,8 +294,6 @@ unsigned int _dbus_filter_add_rule(struct _dbus_filter *filter,
 
 		}
 
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 		/*
 		 * Mark the condition used.  We do this by setting
 		 * condition->type to an invalid value unless it is the
@@ -317,7 +315,6 @@ _Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 		 * have yet created an AddMatch rule on the server.
 		 */
 		remote_rule |= node->match.remote_rule;
-_Pragma("GCC diagnostic pop")
 	}
 
 	node = l_new(struct filter_node, 1);
@@ -334,11 +331,8 @@ _Pragma("GCC diagnostic pop")
 						rule, rule_len))
 			goto err;
 
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 		parent->id = node->id;
 		parent->match.remote_rule = true;
-_Pragma("GCC diagnostic pop")
 	}
 
 	return node->id;
diff --git a/ell/missing.h b/ell/missing.h
index b1ee0f14..93abb6f2 100644
--- a/ell/missing.h
+++ b/ell/missing.h
@@ -56,9 +56,6 @@ static inline void explicit_bzero(void *s, size_t n)
 #ifndef HAVE_RAWMEMCHR
 static inline void *rawmemchr(const void *s, int c)
 {
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wstringop-overflow=\"")
 	return memchr(s, c, PTRDIFF_MAX);
-_Pragma("GCC diagnostic pop")
 }
 #endif
diff --git a/src/band.c b/src/band.c
index 14daeb37..3aacfc6d 100644
--- a/src/band.c
+++ b/src/band.c
@@ -1260,10 +1260,7 @@ int band_freq_to_ht_chandef(uint32_t freq, const struct band_freq_attrs *attr,
 	 * - 40mhz we can base the selection off the channel flags, either
 	 *   higher or lower.
 	 */
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 	switch (width) {
-_Pragma("GCC diagnostic pop")
 	case BAND_CHANDEF_WIDTH_20:
 		return 0;
 	case BAND_CHANDEF_WIDTH_40:
diff --git a/src/eap.c b/src/eap.c
index 4d08f072..1ac119ff 100644
--- a/src/eap.c
+++ b/src/eap.c
@@ -527,10 +527,7 @@ static void eap_handle_response(struct eap_state *eap, const uint8_t *pkt,
 	if (our_type != EAP_TYPE_EXPANDED) {
 		if (RESPONSE_IS(our_type))
 			goto handle_response;
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 	} else if (IS_EXPANDED_RESPONSE(our_vendor_id, our_vendor_type))
-_Pragma("GCC diagnostic pop")
 		goto handle_response;
 
 error:
diff --git a/src/eapol.c b/src/eapol.c
index 6e37a54a..3433d14d 100644
--- a/src/eapol.c
+++ b/src/eapol.c
@@ -1097,7 +1097,7 @@ static void eapol_set_key_timeout(struct eapol_sm *sm,
  * around this by dropping to O0 for this function when old GCC versions
  * are used
  */
-#if __GNUC__ < 9
+#if __GNUC__ < 9 && !defined (__clang__)
 #pragma GCC optimize ("O0")
 #endif
 
@@ -1153,7 +1153,7 @@ static void eapol_send_ptk_1_of_4(struct eapol_sm *sm)
 	eapol_sm_write(sm, (struct eapol_frame *) ek, false);
 }
 
-#if __GNUC__ < 9
+#if __GNUC__ < 9 && !defined(__clang__)
 #pragma GCC reset_options
 #endif
 
diff --git a/src/fils.c b/src/fils.c
index ff8c1d6c..53d12315 100644
--- a/src/fils.c
+++ b/src/fils.c
@@ -572,8 +572,6 @@ static int fils_rx_associate(struct auth_proto *driver, const uint8_t *frame,
 	handshake_state_set_pmk(fils->hs, fils->pmk, fils->pmk_len);
 	handshake_state_set_pmkid(fils->hs, fils->pmkid);
 
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 	if (gtk)
 		handshake_state_install_gtk(fils->hs, gtk_key_index, gtk,
 						gtk_len, key_rsc, 6);
@@ -581,7 +579,6 @@ _Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
 	if (igtk)
 		handshake_state_install_igtk(fils->hs, igtk_key_index,
 						igtk + 6, igtk_len - 6, igtk);
-_Pragma("GCC diagnostic pop")
 
 	handshake_state_set_ptk(fils->hs, fils->kek_and_tk, fils->kek_len + 16);
 	handshake_state_install_ptk(fils->hs);
diff --git a/src/missing.h b/src/missing.h
index a5b92952..a65800f3 100644
--- a/src/missing.h
+++ b/src/missing.h
@@ -31,10 +31,7 @@ static inline void explicit_bzero(void *s, size_t n)
 #ifndef HAVE_RAWMEMCHR
 static inline void *rawmemchr(const void *s, int c)
 {
-_Pragma("GCC diagnostic push")
-_Pragma("GCC diagnostic ignored \"-Wstringop-overflow=\"")
 	return memchr(s, c, (size_t) -1);
-_Pragma("GCC diagnostic pop")
 }
 #endif
 
