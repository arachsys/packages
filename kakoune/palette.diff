diff --git a/doc/pages/options.asciidoc b/doc/pages/options.asciidoc
index 812b20b..d4c49ba 100644
--- a/doc/pages/options.asciidoc
+++ b/doc/pages/options.asciidoc
@@ -381,6 +381,11 @@ are exclusively available to built-in options.
             set the maximum allowable width of an info box. set to zero for
             no limit.
 
+        *terminal_use_palette*:::
+            if *yes* or *true*, approximate 24-bit colors using the standard
+            256-color palette instead of emitting true RGB escape sequences
+            (defaults to *false*)
+
 [[startup-info]]
 *startup_info_version* `int`::
     _default_ 0 +
diff --git a/src/main.cc b/src/main.cc
index 2a708ac..d5c854c 100644
--- a/src/main.cc
+++ b/src/main.cc
@@ -568,7 +568,8 @@ void register_options()
                        "    terminal_shift_function_key    int\n"
                        "    terminal_padding_char          codepoint\n"
                        "    terminal_padding_fill          bool\n"
-                       "    terminal_info_max_width        int\n",
+                       "    terminal_info_max_width        int\n"
+                       "    terminal_use_palette           bool\n",
                        UserInterface::Options{});
     reg.declare_option("modelinefmt", "format string used to generate the modeline",
                        "%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]"_str);
diff --git a/src/terminal_ui.cc b/src/terminal_ui.cc
index d411dd6..ffd10ca 100644
--- a/src/terminal_ui.cc
+++ b/src/terminal_ui.cc
@@ -227,13 +227,24 @@ void TerminalUI::Screen::set_face(const Face& face, Writer& writer)
     static constexpr int ul_table[]{ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
     static constexpr const char* attr_table[]{ "0", "4", "4:3", "7", "5", "1", "2", "3", "9" };
 
+    auto nearest = [](const Color& color) {
+        int i = color.r < 35 ? 0 : (color.r - 35)/40;
+        int j = color.g < 35 ? 0 : (color.g - 35)/40;
+        int k = color.b < 35 ? 0 : (color.b - 35)/40;
+        if (i == j and j == k and color.g >= 4 and color.g < 244)
+            return 232 + (color.g - 4)/10;
+        return 36*i + 6*j + k + 16;
+    };
+
     auto set_color = [&](bool fg, const Color& color, bool join) {
         if (join)
             writer.write(";");
-        if (color.isRGB())
-            format_with(writer, "{};2;{};{};{}", fg ? 38 : 48, color.r, color.g, color.b);
-        else
+        if (not color.isRGB())
             format_with(writer, "{}", (fg ? fg_table : bg_table)[(int)(char)color.color]);
+        else if (m_use_palette)
+            format_with(writer, "{};5;{}", fg ? 38 : 48, nearest(color));
+        else
+            format_with(writer, "{};2;{};{};{}", fg ? 38 : 48, color.r, color.g, color.b);
     };
 
     if (m_active_face == face)
@@ -267,10 +278,12 @@ void TerminalUI::Screen::set_face(const Face& face, Writer& writer)
             writer.write(";");
         if (face.underline != Color::Default)
         {
-            if (face.underline.isRGB())
-                format_with(writer, "58:2::{}:{}:{}", face.underline.r, face.underline.g, face.underline.b);
-            else
+            if (not face.underline.isRGB())
                 format_with(writer, "58:5:{}", ul_table[(int)(char)face.underline.color]);
+            else if (m_use_palette)
+                format_with(writer, "58:5::{}", nearest(face.underline));
+            else
+                format_with(writer, "58:2::{}:{}:{}", face.underline.r, face.underline.g, face.underline.b);
         }
         else
             format_with(writer, "59");
@@ -1533,6 +1546,8 @@ void TerminalUI::set_ui_options(const Options& options)
     m_padding_fill = find("terminal_padding_fill").map(to_bool).value_or(false);
 
     m_info_max_width = find("terminal_info_max_width").map(str_to_int_ifp).value_or(0);
+
+    m_screen.m_use_palette = find("terminal_use_palette").map(to_bool).value_or(false);
 }
 
 }
diff --git a/src/terminal_ui.hh b/src/terminal_ui.hh
index dd4ef87..e1a9633 100644
--- a/src/terminal_ui.hh
+++ b/src/terminal_ui.hh
@@ -95,6 +95,7 @@ private:
 
         std::unique_ptr<size_t[]> hashes;
         Face m_active_face;
+        bool m_use_palette = false;
     };
 
     Window m_window;
