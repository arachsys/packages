require cmake libedit python

check() {
  url https://github.com/llvm/llvm-project/tags
  match llvm 15.0.6 'llvmorg-([0-9.]+)\.tar'
}

prepare() {
  unpack llvm-15.0.6.tar.gz \
    https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-15.0.6.tar.gz
  apply config.diff
  apply distro.diff
  apply multiarch.diff
  apply paths.diff
  apply sanitizer.diff
  apply tools.diff
  tree 94dc6b8e00e5dafc1f60dacb90a4ce6eb78ae56dbeeab1e6f5bfb2feeab5f9f7
}

build() {
  declare -a CONFIG
  enabled lto && CONFIG+=( -DLLVM_ENABLE_LTO=Thin )
  if [[ -f /lib/shared/libc++abi.so ]] \
      && [[ -f /lib/shared/libunwind.so ]]; then
    CONFIG+=( -DSANITIZER_COMMON_LINK_LIBS="c++abi;unwind" )
  else
    CONFIG+=( -DCOMPILER_RT_BUILD_LIBFUZZER=No )
    CONFIG+=( -DCOMPILER_RT_BUILD_MEMPROF=No )
    CONFIG+=( -DCOMPILER_RT_BUILD_SANITIZERS=No )
    CONFIG+=( -DCOMPILER_RT_BUILD_XRAY=No )
  fi

  if TARGETS=$(feature targets); then
    CONFIG+=( -DLLVM_TARGETS_TO_BUILD="Native;${TARGETS//,/;}" )
  else
    CONFIG+=( -DLLVM_TARGETS_TO_BUILD="Native;AArch64;ARM;X86;BPF;WebAssembly" )
  fi

  mkdir -p /src/build
  cd /src/build
  cmake -W no-dev \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/ \
    -DCMAKE_SKIP_INSTALL_RPATH=Yes \
    -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=Yes \
    -DLLVM_ENABLE_PROJECTS="compiler-rt;polly;clang;lld;lldb" \
    -DLLVM_ENABLE_RUNTIMES="libunwind;libcxx;libcxxabi" \
    -DLLVM_HOST_TRIPLE=$CHOST \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=Yes \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=Yes \
    -DLIBUNWIND_USE_COMPILER_RT=Yes \
    -DLIBCXXABI_USE_COMPILER_RT=Yes \
    -DLIBCXXABI_USE_LLVM_UNWINDER=Yes \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_HAS_ATOMIC_LIB=No \
    -DLIBCXX_HAS_MUSL_LIBC=Yes \
    -DLIBCXX_USE_COMPILER_RT=Yes \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_PIE_ON_LINUX=Yes \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_LINKS_TO_CREATE="c++;cc;clang++;clang-cl;clang-cpp;cpp" \
    -DLLD_SYMLINKS_TO_CREATE="ld;wasm-ld" \
    -DLibEdit_INCLUDE_DIRS=/lib/include \
    -DLibEdit_LIBRARIES="/lib/shared/libedit.so" \
    "${CONFIG[@]}" ../llvm
  make compiler-rt
  make install DESTDIR=/dst

  CLANGDIR=/dst/lib/clang/$(bin/llvm-config --version)
  LLVMDIR=/dst/lib/llvm/$(bin/llvm-config --version)
  mkdir -p $LLVMDIR/bin $LLVMDIR/include $LLVMDIR/lib
  cp bin/llvm-config $LLVMDIR/bin/
  cp $(bin/llvm-config --libfiles) $LLVMDIR/lib/
  cp -R include/llvm ../llvm/include/{llvm,llvm-c} $LLVMDIR/include/

  for TARGET in wasm32 wasm64; do
    if /dst/bin/clang -print-targets | grep -q -F $TARGET; then
      mkdir -p /src/build-$TARGET $CLANGDIR/lib/$TARGET-wasi
      cd /src/build-$TARGET
      cmake -W no-dev \
        -DCMAKE_{ASM,C,CXX}_COMPILER_TARGET=$TARGET-wasi \
        -DCMAKE_ASM_COMPILER=/dst/bin/llvm-as \
        -DCMAKE_C_COMPILER=/dst/bin/clang \
        -DCMAKE_CXX_COMPILER=/dst/bin/clang++ \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_COMPILER_WORKS=Yes \
        -DLLVM_CONFIG_PATH=../build/bin/llvm-config \
        -DCOMPILER_RT_BAREMETAL_BUILD=Yes \
        -DCOMPILER_RT_DEFAULT_TARGET_ONLY=Yes \
        ../compiler-rt/lib/builtins
      make compiler-rt
      cp lib/*/libclang_rt.builtins-$TARGET.a \
        $CLANGDIR/lib/$TARGET-wasi/libclang_rt.builtins.a
    fi
  done

  find $LLVMDIR/include -type d -or -name '*.def' -or -name '*.h' \
    -or -name '*.inc' -or -name '*.td' -or -delete
  rm -f -r $LLVMDIR/include/**/{CMakeFiles,config.h}

  rm -f -r /dst/bin/{git-clang-format,hmaptool,lldb-vscode,llvm-pdbutil}
  rm -f -r /dst/include/{clang-c,llvm-c}
  rm -f -r /dst/lib/{cmake,libLTO.so*,libRemarks.so*,LLVMPolly.so*}
  rm -f -r /dst/lib/opt-viewer /dst/lib/**/*.{applescript,css,el,py}
  mv /dst/include /dst/lib/include

  RUNTIME=$(/dst/bin/clang -print-libgcc-file-name)
  UNWIND=$(readlink /dst/lib/libunwind.so)
  rm -f /dst/lib/libunwind.so
  echo "INPUT ( $UNWIND ../${RUNTIME#/*/lib/} )" >/dst/lib/libunwind.so

  image lldb contains /dst/bin/lldb* /dst/lib/liblldb*.{a,so,so.*}
  image lldb requires libedit

  image llvm-shared contains /dst/lib/lib{c++,c++abi,unwind}.{so,so.*}
  image - requires llvm-shared
}
