require python

prepare() {
  unpack llvm-project-12.0.1.tar.xz \
    https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/llvm-project-12.0.1.src.tar.xz
  unpack -d cmake \
    https://github.com/Kitware/CMake/releases/download/v3.19.6/cmake-3.19.6.tar.gz
  apply distro.patch
  apply paths.patch
  apply prune.patch
  apply sanitizer.patch
  apply tools.patch
  tree 74201da729f14df42c2239c3a36d1052430b20c6ee0a013b38eeaedfa99f86b8
}

build() {
  cd /src/cmake
  $PWD/bootstrap --prefix= --datadir=lib/cmake --docdir=lib/doc/cmake \
    --mandir=lib/man --xdgdatadir=lib --parallel=$((1 + $(nproc))) \
    --system-{bzip2,curl,libarchive,liblzma,zlib,zstd} -- \
    -DCMAKE_SYSTEM_INCLUDE_PATH=/lib/include \
    -DCMAKE_SYSTEM_LIBRARY_PATH="/lib/shared;/lib/static"
  make

  declare -a CONFIG
  enabled lto && CONFIG+=( -DLLVM_ENABLE_LTO=Thin )
  if [[ -f /lib/shared/libc++abi.so ]] \
      && [[ -f /lib/shared/libunwind.so ]]; then
    CONFIG+=( -DSANITIZER_COMMON_LINK_LIBS="c++abi;unwind" )
  else
    CONFIG+=( -DCOMPILER_RT_BUILD_LIBFUZZER=No )
    CONFIG+=( -DCOMPILER_RT_BUILD_MEMPROF=No )
    CONFIG+=( -DCOMPILER_RT_BUILD_SANITIZERS=No )
    CONFIG+=( -DCOMPILER_RT_BUILD_XRAY=No )
  fi

  mkdir -p /src/build
  cd /src/build
  /src/cmake/bin/cmake -W no-dev \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/ \
    -DCMAKE_SKIP_INSTALL_RPATH=Yes \
    -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=Yes \
    -DLLVM_ENABLE_PROJECTS="compiler-rt;polly;clang;lld" \
    -DLLVM_ENABLE_RUNTIMES="libunwind;libcxx;libcxxabi" \
    -DLLVM_HOST_TRIPLE=$CHOST \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=Yes \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=Yes \
    -DLLVM_TARGETS_TO_BUILD="Native;BPF;WebAssembly" \
    -DLIBUNWIND_USE_COMPILER_RT=Yes \
    -DLIBCXXABI_USE_COMPILER_RT=Yes \
    -DLIBCXXABI_USE_LLVM_UNWINDER=Yes \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_HAS_ATOMIC_LIB=No \
    -DLIBCXX_HAS_MUSL_LIBC=Yes \
    -DLIBCXX_USE_COMPILER_RT=Yes \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_INSTALL_SCAN{BUILD,VIEW}=No \
    -DCLANG_LINKS_TO_CREATE="c++;cc;clang++;clang-cl;clang-cpp;cpp" \
    -DLLD_SYMLINKS_TO_CREATE="ld;wasm-ld" \
    "${CONFIG[@]}" ../llvm
  make compiler-rt
  make install DESTDIR=/dst

  CLANGDIR=/dst/lib/clang/$(bin/llvm-config --version)
  LLVMDIR=/dst/lib/llvm/$(bin/llvm-config --version)
  mkdir -p $LLVMDIR/bin $LLVMDIR/include $LLVMDIR/lib
  cp bin/llvm-config $LLVMDIR/bin/
  cp $(bin/llvm-config --libfiles) $LLVMDIR/lib/
  cp -R include/llvm ../llvm/include/{llvm,llvm-c} $LLVMDIR/include/

  for TARGET in wasm32 wasm64; do
    mkdir -p /src/build-$TARGET $CLANGDIR/lib/$TARGET-wasi
    cd /src/build-$TARGET
    /src/cmake/bin/cmake -W no-dev \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_C_COMPILER_WORKS=Yes \
      -DLLVM_CONFIG_PATH=../build/bin/llvm-config \
      -DCOMPILER_RT_BAREMETAL_BUILD=Yes \
      -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=$TARGET-wasi \
      ../compiler-rt/lib/builtins
    make compiler-rt
    cp lib/*/libclang_rt.builtins-$TARGET.a \
      $CLANGDIR/lib/$TARGET-wasi/libclang_rt.builtins.a
  done

  find $LLVMDIR/include -type d -or -name '*.def' -or -name '*.h' \
    -or -name '*.inc' -or -name '*.td' -or -delete
  rm -f -r $LLVMDIR/include/**/{CMakeFiles,config.h}

  rm -f -r /dst/include/{clang-c,llvm-c}
  rm -f -r /dst/lib/{cmake,libclang.so*,libLTO.so*,libRemarks.so*,LLVMPolly.so*}
  mv /dst/include /dst/lib/include

  if [[ $CHOST != @(amd64|x86_64)-* ]]; then
    RUNTIME=$(/dst/bin/clang -print-libgcc-file-name)
    UNWIND=$(readlink /dst/lib/libunwind.so)
    rm -f /dst/lib/libunwind.so
    echo "INPUT ( $UNWIND ..${RUNTIME#/dst/lib} )" >/dst/lib/libunwind.so
  fi
}
