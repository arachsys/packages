require libedit python

check() {
  url https://github.com/llvm/llvm-project/tags
  match llvm 20.1.7 'llvmorg-([0-9.]+)\.tar'

  url https://github.com/Kitware/CMake/tags
  match cmake 4.0.3 'tags/v([0-9.]+)\.tar'
}

prepare() {
  unpack llvm-20.1.7.tar.gz \
    https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.7.tar.gz
  unpack -d cmake \
    https://github.com/Kitware/CMake/releases/download/v4.0.3/cmake-4.0.3.tar.gz
  apply cmake.diff
  apply config.diff
  apply distro.diff
  apply lldb.diff
  apply multiarch.diff
  apply paths.diff
  apply sanitizer.diff
  apply ssp.diff
  apply tools.diff
  tree 3955a5d3762f12c2a929d22c881b9ff2f229cf98f5cb7faa917980190d74ac60
}

build() {
  cd /src/cmake
  /src/cmake/bootstrap --parallel=$((1 + $(nproc))) \
    --system-{bzip2,curl,libarchive,liblzma,zlib,zstd} -- \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_SYSTEM_INCLUDE_PATH=/lib/include \
    -DCMAKE_SYSTEM_LIBRARY_PATH=/lib/shared\;/lib/static
  make

  declare -a CONFIG
  enabled lto && CONFIG+=( -DLLVM_ENABLE_LTO=Thin )
  if [[ -f /lib/shared/libc++abi.so ]] \
      && [[ -f /lib/shared/libunwind.so ]]; then
    CONFIG+=( -DSANITIZER_COMMON_LINK_LIBS="c++abi;unwind" )
  else
    CONFIG+=( -DCOMPILER_RT_BUILD_LIBFUZZER=No )
    CONFIG+=( -DCOMPILER_RT_BUILD_MEMPROF=No )
    CONFIG+=( -DCOMPILER_RT_BUILD_SANITIZERS=No )
    CONFIG+=( -DCOMPILER_RT_BUILD_XRAY=No )
  fi

  if TARGETS=$(feature targets); then
    CONFIG+=( -DLLVM_TARGETS_TO_BUILD="Native;${TARGETS//,/;}" )
  else
    CONFIG+=( -DLLVM_TARGETS_TO_BUILD="Native;AArch64;ARM;X86;BPF;WebAssembly" )
  fi

  if ! enabled static; then
    CONFIG+=( -DLLVM_LINK_LLVM_DYLIB=Yes -DCLANG_LINK_CLANG_DYLIB=Yes )
  fi

  mkdir -p /src/build
  cd /src/build
  /src/cmake/bin/cmake -W no-dev \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/ \
    -DCMAKE_SKIP_INSTALL_RPATH=Yes \
    -DCMAKE_{ASM,C,CXX}_COMPILER_TARGET=$CHOST \
    -DLLVM_ENABLE_PROJECTS="compiler-rt;polly;clang;lld;lldb" \
    -DLLVM_ENABLE_RUNTIMES="libunwind;libcxx;libcxxabi" \
    -DLLVM_HOST_TRIPLE=$CHOST \
    -DLLVM_INCLUDE_TESTS=No \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=Yes \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=Yes \
    -DLLVM_TOOL_OPT_VIEWER_BUILD=No \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_PIE_ON_LINUX=Yes \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_INCLUDE_TESTS=No \
    -DCLANG_LINKS_TO_CREATE="as;c++;cc;clang++;clang-cpp;cpp" \
    -DCLANG_RESOURCE_DIR=../lib/clang \
    -DCOMPILER_RT_DEFAULT_TARGET_ONLY=Yes \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_HAS_ATOMIC_LIB=No \
    -DLIBCXX_HAS_MUSL_LIBC=Yes \
    -DLIBCXX_INSTALL_MODULES_DIR=/include/c++/v1 \
    -DLIBCXX_USE_COMPILER_RT=Yes \
    -DLIBCXXABI_USE_COMPILER_RT=Yes \
    -DLIBCXXABI_USE_LLVM_UNWINDER=Yes \
    -DLIBUNWIND_USE_COMPILER_RT=Yes \
    -DLLD_SYMLINKS_TO_CREATE="ld;wasm-ld" \
    -DLibEdit_INCLUDE_DIRS=/lib/include \
    -DLibEdit_LIBRARIES=/lib/shared/libedit.so \
    -DLIBLZMA_INCLUDE_DIR=/lib/include \
    -DLIBLZMA_LIBRARY=/lib/shared/liblzma.so \
    -DRUNTIMES_CMAKE_ARGS=-DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DZLIB_INCLUDE_DIR=/lib/include \
    -DZLIB_LIBRARY=/lib/shared/libz.so \
    -Dzstd_INCLUDE_DIR=/lib/include \
    -Dzstd_LIBRARY=/lib/shared/libzstd.so \
    "${CONFIG[@]}" ../llvm
  make compiler-rt
  make install DESTDIR=/dst

  mv /dst/include /dst/lib/include
  for DIR in /dst/bin /dst/lib /dst/lib/include; do
    maybe cp -a -l -t $DIR -- $DIR/$CHOST/*
    rm -f -r $DIR/$CHOST
  done

  mkdir -p /dst/lib/{clang,llvm}/{bin,include,lib}
  mv /dst/bin/llvm-config /dst/lib/llvm/bin/
  cp $(bin/llvm-config --libfiles --link-static) /dst/lib/llvm/lib/
  cp -R include/llvm ../llvm/include/llvm{,-c} /dst/lib/llvm/include/
  cp -R ../clang/include/clang{,-c} /dst/lib/clang/include/
  ln -s lld /dst/bin/llvm-ld

  for TARGET in wasm32 wasm64; do
    if /src/build/bin/clang -print-targets | grep -q -F $TARGET; then
      mkdir -p /src/build-$TARGET /dst/lib/clang/lib/$TARGET-wasi
      cd /src/build-$TARGET
      /src/cmake/bin/cmake -W no-dev \
        -DCMAKE_{ASM,C,CXX}_COMPILER=/src/build/bin/clang \
        -DCMAKE_{ASM,C,CXX}_COMPILER_TARGET=$TARGET-wasi \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_COMPILER_WORKS=Yes \
        -DLLVM_CMAKE_DIR=../build \
        -DCOMPILER_RT_BAREMETAL_BUILD=Yes \
        -DCOMPILER_RT_DEFAULT_TARGET_ONLY=Yes \
        ../compiler-rt/lib/builtins
      make builtins
      cp lib/*/libclang_rt.builtins-$TARGET.a \
        /dst/lib/clang/lib/$TARGET-wasi/libclang_rt.builtins.a
    fi
  done

  find /dst/lib/llvm/include -type d -or -name '*.def' -or -name '*.h' \
    -or -name '*.inc' -or -name '*.td' -or -delete
  rm -f -r /dst/lib/**/{.clang-format,config.h,CMake*,*.cmake,*.in,*.py}
  rm -f -r /dst/lib/{cmake,libLTO.so*,libRemarks.so*,LLVMPolly.so*}
  rm -f -r /dst/lib/include/{clang-c,llvm-c}
  mv /dst/lib/libc++.modules.json /dst/lib/clang/lib/

  RUNTIME=$(/src/build/bin/clang -print-libgcc-file-name)
  UNWIND=$(readlink /dst/lib/libunwind.so)
  rm -f /dst/lib/libunwind.so
  echo "INPUT ( $UNWIND ../${RUNTIME#/*/lib/} )" >/dst/lib/libunwind.so

  strip --strip-unneeded /dst/lib/llvm/lib/lib*.a

  image lldb contains /dst/bin/lldb* /dst/lib/liblldb*.{a,so,so.*}
  image lldb requires llvm

  image llvm-shared contains /dst/lib/lib{c++,c++abi,unwind}.{so,so.*}
  image - requires llvm-shared
}
