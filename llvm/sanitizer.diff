diff --git a/clang/lib/Driver/ToolChains/CommonArgs.cpp b/clang/lib/Driver/ToolChains/CommonArgs.cpp
index 443725f7d..ac35b0341 100644
--- a/clang/lib/Driver/ToolChains/CommonArgs.cpp
+++ b/clang/lib/Driver/ToolChains/CommonArgs.cpp
@@ -850,6 +850,8 @@ void tools::linkSanitizerRuntimeDeps(const ToolChain &TC,
   if (TC.getTriple().isOSLinux() && !TC.getTriple().isAndroid() &&
       !TC.getTriple().isMusl())
     CmdArgs.push_back("-lresolv");
+  if (TC.getTriple().isOSLinux())
+    CmdArgs.push_back("-lunwind");
 }
 
 static void
diff --git a/compiler-rt/cmake/Modules/AddCompilerRT.cmake b/compiler-rt/cmake/Modules/AddCompilerRT.cmake
index 00bb892be..4432db667 100644
--- a/compiler-rt/cmake/Modules/AddCompilerRT.cmake
+++ b/compiler-rt/cmake/Modules/AddCompilerRT.cmake
@@ -550,7 +550,7 @@ endfunction()
 
 macro(add_compiler_rt_resource_file target_name file_name component)
   set(src_file "${CMAKE_CURRENT_SOURCE_DIR}/${file_name}")
-  set(dst_file "${COMPILER_RT_OUTPUT_DIR}/share/${file_name}")
+  set(dst_file "${COMPILER_RT_OUTPUT_DIR}/lib/${file_name}")
   add_custom_command(OUTPUT ${dst_file}
     DEPENDS ${src_file}
     COMMAND ${CMAKE_COMMAND} -E copy_if_different ${src_file} ${dst_file}
diff --git a/compiler-rt/cmake/config-ix.cmake b/compiler-rt/cmake/config-ix.cmake
index cd45176cf..9ffbf6788 100644
--- a/compiler-rt/cmake/config-ix.cmake
+++ b/compiler-rt/cmake/config-ix.cmake
@@ -855,7 +855,7 @@ endif()
 # TODO(hctim): Enable this on Android again. Looks like it's causing a SIGSEGV
 # for Scudo and GWP-ASan, further testing needed.
 if (GWP_ASAN_SUPPORTED_ARCH AND COMPILER_RT_BUILD_GWP_ASAN AND
-    OS_NAME MATCHES "Linux")
+    OS_NAME MATCHES "Linux" AND NOT LIBCXX_HAS_MUSL_LIBC)
   set(COMPILER_RT_HAS_GWP_ASAN TRUE)
 else()
   set(COMPILER_RT_HAS_GWP_ASAN FALSE)
diff --git a/compiler-rt/lib/dfsan/CMakeLists.txt b/compiler-rt/lib/dfsan/CMakeLists.txt
index c5190584a..ec1d85966 100644
--- a/compiler-rt/lib/dfsan/CMakeLists.txt
+++ b/compiler-rt/lib/dfsan/CMakeLists.txt
@@ -53,7 +53,7 @@ foreach(arch ${DFSAN_SUPPORTED_ARCH})
     clang_rt.dfsan-${arch}-symbols)
 endforeach()
 
-set(dfsan_abilist_dir ${COMPILER_RT_OUTPUT_DIR}/share)
+set(dfsan_abilist_dir ${COMPILER_RT_OUTPUT_DIR}/lib)
 set(dfsan_abilist_filename ${dfsan_abilist_dir}/dfsan_abilist.txt)
 add_custom_target(dfsan_abilist ALL
   DEPENDS ${dfsan_abilist_filename})
