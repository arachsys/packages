diff --git a/lib/commands/toolcontext.c b/lib/commands/toolcontext.c
index 2ad04d7e..04446bda 100644
--- a/lib/commands/toolcontext.c
+++ b/lib/commands/toolcontext.c
@@ -1660,6 +1660,7 @@ struct cmd_context *create_toolcontext(unsigned is_clvmd,
 	/* FIXME Make this configurable? */
 	reset_lvm_errno(1);
 
+#ifdef __GLIBC__
 	/* Set in/out stream buffering before glibc */
 	if (set_buffering
 	    && !cmd->running_on_valgrind /* Skipping within valgrind execution. */
@@ -1701,7 +1702,10 @@ struct cmd_context *create_toolcontext(unsigned is_clvmd,
 			}
 		}
 		/* Buffers are used for lines without '\n' */
-	} else if (!set_buffering)
+	}
+#endif
+
+	if (!set_buffering)
 		/* Without buffering, must not use stdin/stdout */
 		init_silent(1);
 
diff --git a/tools/lvmcmdline.c b/tools/lvmcmdline.c
index 3fd23a52..c2ee3990 100644
--- a/tools/lvmcmdline.c
+++ b/tools/lvmcmdline.c
@@ -3380,7 +3380,7 @@ static int _check_standard_fds(void)
 	int err = is_valid_fd(STDERR_FILENO);
 
 	if (!is_valid_fd(STDIN_FILENO) &&
-	    !(stdin = fopen(_PATH_DEVNULL, "r"))) {
+	    !freopen(_PATH_DEVNULL, "r", stdin)) {
 		if (err)
 			perror("stdin stream open");
 		else
@@ -3390,7 +3390,7 @@ static int _check_standard_fds(void)
 	}
 
 	if (!is_valid_fd(STDOUT_FILENO) &&
-	    !(stdout = fopen(_PATH_DEVNULL, "w"))) {
+	    !freopen(_PATH_DEVNULL, "w", stdout)) {
 		if (err)
 			perror("stdout stream open");
 		/* else no stdout */
@@ -3398,7 +3398,7 @@ static int _check_standard_fds(void)
 	}
 
 	if (!is_valid_fd(STDERR_FILENO) &&
-	    !(stderr = fopen(_PATH_DEVNULL, "w"))) {
+	    !freopen(_PATH_DEVNULL, "w", stderr)) {
 		printf("stderr stream open: %s\n",
 		       strerror(errno));
 		return 0;
