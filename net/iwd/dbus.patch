diff --git a/ell/dbus-service.c b/ell/dbus-service.c
index e60eafc..5f4329c 100644
--- a/ell/dbus-service.c
+++ b/ell/dbus-service.c
@@ -1114,7 +1114,7 @@ void _dbus_object_tree_signals_flush(struct l_dbus *dbus, const char *path)
 	struct emit_signals_data data;
 	bool all_done = true;
 
-	if (!tree->emit_signals_work || tree->flushing)
+	if (!tree || !tree->emit_signals_work || tree->flushing)
 		return;
 
 	tree->flushing = true;
@@ -1164,7 +1164,7 @@ static void schedule_emit_signals(struct l_dbus *dbus)
 {
 	struct _dbus_object_tree *tree = _dbus_get_tree(dbus);
 
-	if (tree->emit_signals_work)
+	if (!tree || tree->emit_signals_work)
 		return;
 
 	tree->emit_signals_work = l_idle_create(emit_signals, dbus, NULL);
@@ -1193,6 +1193,9 @@ bool _dbus_object_tree_property_changed(struct l_dbus *dbus,
 	struct _dbus_property *property;
 	struct _dbus_object_tree *tree = _dbus_get_tree(dbus);
 
+	if (!tree)
+		return false;
+
 	object = l_hashmap_lookup(tree->objects, path);
 	if (!object)
 		return false;
@@ -1296,6 +1299,9 @@ static struct l_dbus_message *old_set_property(struct l_dbus *dbus,
 	struct l_dbus_message *reply;
 	l_dbus_property_complete_cb_t complete_cb;
 
+	if (!tree)
+		return NULL;
+
 	interface = l_hashmap_lookup(tree->interfaces,
 					l_dbus_message_get_interface(message));
 	/* If we got here the interface must exist */
@@ -1345,6 +1351,9 @@ static struct l_dbus_message *old_get_properties(struct l_dbus *dbus,
 	struct l_dbus_message_builder *builder;
 	struct _dbus_object_tree *tree = _dbus_get_tree(dbus);
 
+	if (!tree)
+		return NULL;
+
 	interface = l_hashmap_lookup(tree->interfaces,
 					l_dbus_message_get_interface(message));
 	/* If we got here the interface must exist */
@@ -1817,6 +1826,9 @@ static struct l_dbus_message *properties_get(struct l_dbus *dbus,
 	struct l_dbus_message *reply;
 	struct l_dbus_message_builder *builder;
 
+	if (!tree)
+		return NULL;
+
 	if (!l_dbus_message_get_arguments(message, "ss", &interface_name,
 						&property_name))
 		return l_dbus_message_new_error(message,
@@ -1887,6 +1899,9 @@ static struct l_dbus_message *properties_set(struct l_dbus *dbus,
 	struct l_dbus_message *reply;
 	l_dbus_property_complete_cb_t complete_cb;
 
+	if (!tree)
+		return NULL;
+
 	if (!l_dbus_message_get_arguments(message, "ssv", &interface_name,
 						&property_name, &variant))
 		return l_dbus_message_new_error(message,
@@ -1955,6 +1970,9 @@ static struct l_dbus_message *properties_get_all(struct l_dbus *dbus,
 	struct l_dbus_message *reply;
 	struct l_dbus_message_builder *builder;
 
+	if (!tree)
+		return NULL;
+
 	if (!l_dbus_message_get_arguments(message, "s", &interface_name))
 		return l_dbus_message_new_error(message,
 						"org.freedesktop.DBus.Error."
@@ -2111,7 +2129,7 @@ static struct l_dbus_message *get_managed_objects(struct l_dbus *dbus,
 	struct _dbus_object_tree *tree = _dbus_get_tree(dbus);
 	const char *path = l_dbus_message_get_path(message);
 
-	return _dbus_object_tree_get_objects(tree, dbus, path, message);
+	return tree ? _dbus_object_tree_get_objects(tree, dbus, path, message) : NULL;
 }
 
 static void object_manager_setup_func(struct l_dbus_interface *interface)
diff --git a/ell/dbus.c b/ell/dbus.c
index fb520e2..80de83b 100644
--- a/ell/dbus.c
+++ b/ell/dbus.c
@@ -1420,7 +1420,7 @@ int _dbus_get_fd(struct l_dbus *dbus)
 
 struct _dbus_object_tree *_dbus_get_tree(struct l_dbus *dbus)
 {
-	return dbus->tree;
+	return dbus ? dbus->tree : NULL;
 }
 
 /**
@@ -1447,7 +1447,7 @@ LIB_EXPORT bool l_dbus_register_interface(struct l_dbus *dbus,
 				bool handle_old_style_properties)
 {
 	if (unlikely(!dbus))
-		return false;
+		return true;
 
 	if (unlikely(!dbus->tree))
 		return false;
@@ -1461,7 +1461,7 @@ LIB_EXPORT bool l_dbus_unregister_interface(struct l_dbus *dbus,
 						const char *interface)
 {
 	if (unlikely(!dbus))
-		return false;
+		return true;
 
 	if (unlikely(!dbus->tree))
 		return false;
@@ -1499,7 +1499,7 @@ LIB_EXPORT bool l_dbus_register_object(struct l_dbus *dbus, const char *path,
 	bool r = true;
 
 	if (unlikely(!dbus))
-		return false;
+		return true;
 
 	if (unlikely(!dbus->tree))
 		return false;
@@ -1529,7 +1529,7 @@ LIB_EXPORT bool l_dbus_unregister_object(struct l_dbus *dbus,
 						const char *object)
 {
 	if (unlikely(!dbus))
-		return false;
+		return true;
 
 	if (unlikely(!dbus->tree))
 		return false;
@@ -1562,7 +1562,7 @@ LIB_EXPORT bool l_dbus_object_add_interface(struct l_dbus *dbus,
 						void *user_data)
 {
 	if (unlikely(!dbus))
-		return false;
+		return true;
 
 	if (unlikely(!dbus->tree))
 		return false;
@@ -1576,7 +1576,7 @@ LIB_EXPORT bool l_dbus_object_remove_interface(struct l_dbus *dbus,
 						const char *interface)
 {
 	if (unlikely(!dbus))
-		return false;
+		return true;
 
 	if (unlikely(!dbus->tree))
 		return false;
@@ -1602,7 +1602,7 @@ LIB_EXPORT bool l_dbus_object_manager_enable(struct l_dbus *dbus,
 						const char *root)
 {
 	if (unlikely(!dbus))
-		return false;
+		return true;
 
 	if (unlikely(!dbus->tree))
 		return false;
@@ -1629,7 +1629,7 @@ LIB_EXPORT unsigned int l_dbus_add_service_watch(struct l_dbus *dbus,
 					void *user_data,
 					l_dbus_destroy_func_t destroy)
 {
-	if (!name)
+	if (!name || !dbus)
 		return 0;
 
 	if (!dbus->name_cache)
@@ -1643,7 +1643,7 @@ LIB_EXPORT unsigned int l_dbus_add_service_watch(struct l_dbus *dbus,
 
 LIB_EXPORT bool l_dbus_remove_watch(struct l_dbus *dbus, unsigned int id)
 {
-	if (!dbus->name_cache)
+	if (!dbus || !dbus->name_cache)
 		return false;
 
 	return _dbus_name_cache_remove_watch(dbus->name_cache, id);
@@ -1701,6 +1701,9 @@ LIB_EXPORT unsigned int l_dbus_add_signal_watch(struct l_dbus *dbus,
 	void *user_data;
 	unsigned int id;
 
+	if (!dbus)
+		return 0;
+
 	va_start(args, member);
 
 	rule_len = 0;
@@ -1775,7 +1778,7 @@ LIB_EXPORT unsigned int l_dbus_add_signal_watch(struct l_dbus *dbus,
 
 LIB_EXPORT bool l_dbus_remove_signal_watch(struct l_dbus *dbus, unsigned int id)
 {
-	if (!dbus->filter)
+	if (!dbus || !dbus->filter)
 		return false;
 
 	return _dbus_filter_remove_rule(dbus->filter, id);
@@ -1806,6 +1809,9 @@ LIB_EXPORT uint32_t l_dbus_name_acquire(struct l_dbus *dbus, const char *name,
 				bool queue, l_dbus_name_acquire_func_t callback,
 				void *user_data)
 {
+	if (!dbus)
+		return 0;
+
 	return dbus->driver->name_acquire(dbus, name, allow_replacement,
 						replace_existing, queue,
 						callback, user_data);
diff --git a/src/main.c b/src/main.c
index 3216f50..32aaa31 100644
--- a/src/main.c
+++ b/src/main.c
@@ -490,17 +490,20 @@ int main(int argc, char *argv[])
 		l_netlink_set_debug(rtnl, do_debug, "[RTNL] ", NULL);
 
 	dbus = l_dbus_new_default(L_DBUS_SYSTEM_BUS);
-	if (!dbus) {
-		l_error("Failed to initialize D-Bus");
-		goto failed_dbus;
-	}
+	if (!dbus)
+		l_info("Running in embedded mode without D-Bus");
 
-	if (enable_dbus_debug)
+	if (dbus && enable_dbus_debug)
 		l_dbus_set_debug(dbus, do_debug, "[DBUS] ", NULL);
 
-	l_dbus_set_ready_handler(dbus, dbus_ready, dbus, NULL);
-	l_dbus_set_disconnect_handler(dbus, dbus_disconnected, NULL, NULL);
-	dbus_init(dbus);
+	if (dbus) {
+		l_dbus_set_ready_handler(dbus, dbus_ready, dbus, NULL);
+		l_dbus_set_disconnect_handler(dbus, dbus_disconnected, NULL, NULL);
+		dbus_init(dbus);
+	} else {
+		l_genl_request_family(genl, NL80211_GENL_NAME, nl80211_appeared,
+					NULL, NULL);
+	}
 
 	exit_status = l_main_run_with_signal(signal_handler, NULL);
 
@@ -509,7 +512,6 @@ int main(int argc, char *argv[])
 	dbus_exit();
 	l_dbus_destroy(dbus);
 
-failed_dbus:
 	l_netlink_destroy(rtnl);
 
 failed_rtnl:
