diff --git a/src/client.c b/src/client.c
index 6fc60af..432f7fd 100644
--- a/src/client.c
+++ b/src/client.c
@@ -254,11 +254,6 @@ handle_auto(uint8_t trusted, double offset)
 	if (!trusted && conf->constraint_median == 0)
 		return;
 
-	if (offset < AUTO_THRESHOLD) {
-		/* don't bother */
-		priv_settime(0, "offset is negative or close enough");
-		return;
-	}
 	/* collect some more */
 	v[count++] = offset;
 	if (count < AUTO_REPLIES)
diff --git a/src/ntp.c b/src/ntp.c
index 690806d..8e14892 100644
--- a/src/ntp.c
+++ b/src/ntp.c
@@ -22,6 +22,7 @@
 #include <sys/stat.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <math.h>
 #include <paths.h>
 #include <poll.h>
 #include <pwd.h>
@@ -849,8 +850,10 @@ offset_compare(const void *aa, const void *bb)
 void
 priv_settime(double offset, char *msg)
 {
-	if (offset == 0)
-		log_info("cancel settime because %s", msg);
+	if (offset == 0 && msg && msg[0]) {
+		log_warnx("failed to set time because %s", msg);
+		offset = NAN;
+	}
 	imsg_compose(ibuf_main, IMSG_SETTIME, 0, 0, -1,
 	    &offset, sizeof(offset));
 	conf->settime = 0;
diff --git a/src/ntpd.c b/src/ntpd.c
index 3a5aa0c..af221d9 100644
--- a/src/ntpd.c
+++ b/src/ntpd.c
@@ -30,6 +30,7 @@
 #include <sys/un.h>
 #include <netinet/in.h>
 #include <errno.h>
+#include <math.h>
 #include <poll.h>
 #include <pwd.h>
 #include <signal.h>
@@ -55,7 +56,7 @@ int		dispatch_imsg_ctl(struct ntpd_conf *);
 void		reset_adjtime(void);
 int		ntpd_adjtime(double);
 void		ntpd_adjfreq(double, int);
-void		ntpd_settime(double);
+void		ntpd_settime(double, int);
 void		readfreq(void);
 int		writefreq(double);
 void		ctl_main(int, char*[]);
@@ -117,7 +118,7 @@ usage(void)
 		fprintf(stderr,
 		    "Usage: ntpctl -s a[ll] | p[eers] | S[ensors] | s[tatus]\n");
 	else
-		fprintf(stderr, "Usage: %s [-dnv] [-f FILE] [-p FILE]\n",
+		fprintf(stderr, "Usage: %s [-dnsv] [-f FILE] [-p FILE]\n",
 		    __progname);
 	exit(1);
 }
@@ -167,7 +168,6 @@ main(int argc, char *argv[])
 	char			**argv0 = argv;
 	char			*pname = NULL;
 	time_t			 settime_deadline = 0;
-	int			 sopt = 0;
 
 	__progname = get_progname(argv[0]);
 
@@ -191,7 +191,7 @@ main(int argc, char *argv[])
 	argv0 = argv;
 #endif
 
-	while ((ch = getopt(argc, argv, "df:np:P:sSv")) != -1) {
+	while ((ch = getopt(argc, argv, "df:np:P:sv")) != -1) {
 		switch (ch) {
 		case 'd':
 			lconf.debug = 1;
@@ -210,8 +210,7 @@ main(int argc, char *argv[])
 			lconf.pid_file = optarg;
 			break;
 		case 's':
-		case 'S':
-			sopt = ch;
+			lconf.mustset = 1;
 			break;
 		case 'v':
 			lconf.verbose++;
@@ -229,12 +228,6 @@ main(int argc, char *argv[])
 
 	log_init(logdest, lconf.verbose, LOG_DAEMON);
 
-	if (sopt) {
-		log_warnx("-%c option no longer works and will be removed soon.",
-		    sopt);
-		log_warnx("Please reconfigure to use constraints or trusted servers.");
-	}
-
 	argc -= optind;
 	argv += optind;
 	if (argc > 0)
@@ -257,6 +250,8 @@ main(int argc, char *argv[])
 	lconf.automatic = auto_preconditions(&lconf);
 	if (lconf.automatic)
 		lconf.settime = 1;
+	else if (lconf.mustset)
+		errx(1, "-s requires constraints, trusted peers or trusted sensors");
 
 	if (pname != NULL) {
 		/* Remove our proc arguments, so child doesn't need to. */
@@ -370,11 +365,14 @@ main(int argc, char *argv[])
 
 		if (nfds == 0 && lconf.settime &&
 		    getmonotime() > settime_deadline + SETTIME_TIMEOUT) {
+			if (lconf.mustset) {
+				log_warnx("terminating: no reply received in time");
+				exit(1);
+			}
 			lconf.settime = 0;
 			timeout = INFTIM;
 			log_init(logdest, lconf.verbose, LOG_DAEMON);
-			log_warnx("no reply received in time, skipping initial "
-			    "time setting");
+			log_warnx("failed to set time because no reply received in time");
 			if (!lconf.debug) {
 				if (daemon(1, 0))
 					fatal("daemon");
@@ -475,10 +473,15 @@ dispatch_imsg(struct ntpd_conf *lconf, int argc, char **argv)
 				fatalx("invalid IMSG_SETTIME received");
 			if (!lconf->settime)
 				break;
+			memcpy(&d, imsg.data, sizeof(d));
+			if (lconf->mustset && isnan(d)) {
+				log_warnx("terminating: failed to connect to peers");
+				exit(1);
+			}
 			log_init(lconf->debug ? LOG_TO_STDERR : LOG_TO_SYSLOG,
 			    lconf->verbose, LOG_DAEMON);
-			memcpy(&d, imsg.data, sizeof(d));
-			ntpd_settime(d);
+			if (!isnan(d))
+				ntpd_settime(d, lconf->mustset);
 			/* daemonize now */
 			if (!lconf->debug) {
 				if (daemon(1, 0))
@@ -586,14 +589,21 @@ ntpd_adjfreq(double relfreq, int wrlog)
 }
 
 void
-ntpd_settime(double d)
+ntpd_settime(double d, int backwards)
 {
 	struct timeval	tv, curtime;
 	char		buf[80];
 	time_t		tval;
 
-	if (d == 0)
+	if (-AUTO_THRESHOLD < d && d < AUTO_THRESHOLD) {
+		log_info("not setting time because offset is close enough");
 		return;
+	}
+
+	if (d < 0 && !backwards) {
+		log_info("not setting time backwards without -s option");
+		return;
+	}
 
 	if (gettimeofday(&curtime, NULL) == -1) {
 		log_warn("gettimeofday");
diff --git a/src/ntpd.h b/src/ntpd.h
index 3872efc..9fc8356 100644
--- a/src/ntpd.h
+++ b/src/ntpd.h
@@ -79,7 +79,7 @@
 
 #define FILTER_ADJFREQ		0x01	/* set after doing adjfreq */
 #define AUTO_REPLIES    	4	/* # of ntp replies we want for auto */
-#define AUTO_THRESHOLD		60	/* dont bother auto setting < this */
+#define AUTO_THRESHOLD		0.1	/* dont bother auto setting < this */
 #define INTERVAL_AUIO_DNSFAIL	1	/* DNS tmpfail interval for auto */
 #define TRIES_AUTO_DNSFAIL	4	/* DNS tmpfail quick retries */
 
@@ -250,6 +250,7 @@ struct ntpd_conf {
 	int				        	verbose;
 	u_int8_t					listen_all;
 	u_int8_t					settime;
+	u_int8_t					mustset;
 	u_int8_t					automatic;
 	u_int8_t					noaction;
 	u_int8_t					filters;
