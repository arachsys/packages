action() {
  unset OUT SRC
  while getopts :o:s: OPTION; do
    case $OPTION in
      o)
        OUT=$OPTARG
        mkdir -p "$OUT"
        ;;
      s)
        SRC=$OPTARG
        mkdir -p "$SRC"
        ;;
      *)
        die "$(< $LIBRARY/help)"
        ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -lt 1 ]]; then
    die "$(< $LIBRARY/help)"
  fi

  PKG=$(locate "$PKGDIR" "$1")
  mkdir -p "$CACHEDIR" "$IMGDIR"

  ROOT=$(mktemp -d "$IMGDIR/root.XXXXXX")
  trap 'rm -f -r --one-file-system "$ROOT"' EXIT
  chmod 0755 "$ROOT"

  sandbox() {
    PKG=$PKG SRC=$SRC pkg sandbox "$ROOT" "$@"
  }

  populate "$ROOT" build
  mkdir -p "$ROOT/pkg"
  mapfile -t REQUIRED < <(sandbox pkg requirements "${PKG##*/}" "${@:2}")
  populate "$ROOT" "${REQUIRED[@]}"

  if [[ -z $SRC ]] || ( set -- "$SRC"/* && [[ $# -eq 0 ]] ); then
    mkdir -p "$ROOT/src" "$ROOT/var/cache"
    sandbox pkg prepare "${PKG##*/}" "${@:2}"
    rmdir "$ROOT/var/cache" "$ROOT/var"
  fi

  mkdir -p "$ROOT/img/${PKG##*/}" "$ROOT/src"
  ln -s "img/${PKG##*/}" "$ROOT/dst"
  sandbox unshare -n pkg build "${PKG##*/}" "${@:2}"

  for IMG in "$ROOT"/img/*; do
    if [[ -e "${OUT:-$IMGDIR}/${IMG##*/}" ]]; then
      echo "Replacing existing image in ${OUT:-$IMGDIR}/${IMG##*/}"
      rm -f -r "${OUT:-$IMGDIR}/${IMG##*/}"
      mv "$IMG" "${OUT:-$IMGDIR}/${IMG##*/}"
    else
      echo "Installing new image in ${OUT:-$IMGDIR}/${IMG##*/}"
      mv "$IMG" "${OUT:-$IMGDIR}/${IMG##*/}"
    fi
  done
}

helper() {
  build() {
    die "Package neither declares mode nor defines build()"
  }

  image() (
    if [[ $2 == contains ]] && [[ $1 != ?(-) ]]; then
      cd /dst && mkdir -p "/img/$1"
      while [[ $# -gt 2 ]]; do
        cp -a -l -t "/img/$1" --parents -- "${3#/dst/}"
        rm -f -r -- "${3#/dst/}"
        set -- "$1" "$2" "${@:4}"
      done
    elif [[ $2 == requires ]] && [[ $# -gt 2 ]]; then
      if [[ $1 == ?(-) ]]; then
        mkdir -p /dst/info
        printf '%s\n' "${@:3}" >>/dst/info/requirements
      else
        mkdir -p "/img/$1/info"
        printf '%s\n' "${@:3}" >>/img/$1/info/requirements
      fi
    else
      die "Invalid command: image $*"
    fi
  )

  ( PKG=/pkg && setup "${@:2}" && source /pkg/build && build "${@:2}" 2>&1 )

  for FILE in /img/*/bin /img/*/info /img/*/lib; do
    if [[ ! -d $FILE ]]; then
      die "$FILE is not a directory"
    fi
  done

  find /img -type d -exec chown -f 0:0 {} + -exec chmod -f u=rwx,go=rx {} +
  find /img -type f -not -perm /ug+s -exec chown -f 0:0 {} + \
    -exec chmod -f u=rwX,go=rX {} +
  find /img -type f -perm /ug+s -exec chmod -f u+rw,go+r {} +
  rm -f -r /img/*/{etc,lib/{doc,info,man,pkgconfig,**/*.la},run,tmp,var}

  for LIB in /img/*/lib; do
    mkdir -p "$LIB"/{shared,static}
    maybe mv -t "$LIB"/static -- "$LIB"{,/shared}/*.[ao]
    maybe mv -t "$LIB"/shared -- "$LIB"{,/static}/!(ld*).so?(.*)
  done

  maybe chmod -f u=rw,go=r -- /img/*/lib/**/{*.so,*.so.*}
  maybe chmod -f a+x -- /img/*/lib/ld*.so?(.*)
  find /img -mindepth 1 -depth -type d -empty -delete

  ( find /img -mindepth 2 -type f -print0 | while read -d '' -r FILE; do
      if [[ $(hexdump -e '/1 "%02x"' -n 4 -v "$FILE") == 7f454c46 ]]; then
        # ELF executable or shared object
        if readelf -d "$FILE" | grep -q ' (R\(UN\)\?PATH) ' \
             && ! enabled rpaths; then
          echo "$FILE has been compiled with an RPATH or RUNPATH"
        fi
        if ! enabled unstripped; then
          strip --strip-unneeded "$FILE"
        fi
      elif [[ $(hexdump -e '/1 "%02x"' -n 2 -v "$FILE") == 2321 ]]; then
        # Script with '#!' magic
        sed -e '1s:^#! *//*:#!/:' \
            -e '1s:^#!/usr/local/:#!/:' \
            -e '1s:^#!/usr/:#!/:' \
            -e '1s:^#!/bin/env  *\([^ =][^ =]*\)\( \|$\):#!/bin/\1\2:' \
            -i "$FILE"
      else
        chmod u=rw,go=r "$FILE"
      fi

      if [[ -u $FILE ]] && ! enabled setuid; then
        echo "$FILE has been installed setuid"
      elif [[ -g $FILE ]] && ! enabled setgid; then
        echo "$FILE has been installed setgid"
      fi
    done

    for FILE in /img/*/!(bin|info|lib)/**; do
      echo "$FILE is in neither /bin nor /lib"
    done

    find /img -lname '/*' -printf '%p is an absolute symlink\n' \
      -or -xtype l -printf '%p is a dangling symlink\n' \
      -or -not -xtype d -not -xtype f -printf '%p is a special file\n'

    for FILE in /img/*/bin/*; do
      if [[ -d $FILE ]]; then
        echo "$FILE is a directory"
      elif [[ ! -x $FILE ]]; then
        echo "$FILE is not executable"
      fi
    done
  ) | [[ -z $(tee /dev/stderr) ]]

  for IMG in /img/*; do
    if [[ -d "$IMG" ]]; then
      mkdir -p "$IMG/info"
      printf '%s\n' "$1" >"$IMG/info/source"
    fi
    if [[ -f "$IMG/info/requirements" ]]; then
      sort -o "$IMG/info/requirements" -u "$IMG/info/requirements"
    fi
  done

  find /img -depth -exec touch -r / {} +
  hardlink -q -t /img
}

if [[ $$ -eq 1 ]]; then
  helper "$@"
else
  action "$@"
fi
