action() {
  unset DEBUG SRC
  while getopts :ds: OPTION; do
    case $OPTION in
      d)
        DEBUG=1
        ;;
      s)
        if [[ -d $OPTARG ]]; then
          SRC=$OPTARG
        else
          die "Prepared source tree $OPTARG not found"
        fi
        ;;
      *)
        die "$(< $LIBRARY/help)"
        ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -lt 1 ]]; then
    die "$(< $LIBRARY/help)"
  fi

  PKG=$(locate "$PKGDIR" "$1")
  mkdir -p "$CACHEDIR" "$IMGDIR"

  ROOT=$(mktemp -d "$IMGDIR/${PKG##*/}.XXXXXX")
  chmod 0755 "$ROOT"

  if [[ -n $DEBUG ]]; then
    trap 'echo "Build root left in $ROOT" >&2' EXIT
  else
    trap 'rm -f -r --one-file-system "$ROOT"' EXIT
  fi

  sandbox() {
    PKG=$PKG SRC=$SRC pkg sandbox "$ROOT" "$@"
  }

  populate "$ROOT" build
  mkdir -p "$ROOT/img/${PKG##*/}" "$ROOT/pkg" "$ROOT/src"
  ln -s "img/${PKG##*/}" "$ROOT/dst"
  mapfile -t REQUIRED < <(sandbox pkg requirements "${PKG##*/}" "${@:2}")
  populate "$ROOT" "${REQUIRED[@]}"

  if [[ -z $SRC ]]; then
    sandbox pkg prepare "${PKG##*/}" "${@:2}"
  fi

  sandbox unshare -n pkg build "${PKG##*/}" "${@:2}"

  if [[ -n $DEBUG ]]; then
    echo "Debug mode: not installing or replacing images"
  else
    for IMG in "$ROOT"/img/*; do
      if [[ -e "$IMGDIR/${IMG##*/}" ]]; then
        echo "Replacing existing image in $IMGDIR/${IMG##*/}"
        rm -f -r "$IMGDIR/${IMG##*/}"
        mv "$IMG" "$IMGDIR/${IMG##*/}"
      else
        echo "Installing new image in $IMGDIR/${IMG##*/}"
        mv "$IMG" "$IMGDIR/${IMG##*/}"
      fi
    done
  fi
}

helper() {
  image() (
    if [[ $2 == contains ]] && [[ $1 != ?(-) ]]; then
      cd /dst && mkdir -p "/img/$1"
      while [[ $# -gt 2 ]]; do
        cp -a -l -t "/img/$1" --parents -- "${3#/dst/}"
        rm -f -r -- "${3#/dst/}"
        set -- "$1" "$2" "${@:4}"
      done
    elif [[ $2 == requires ]] && [[ $# -gt 2 ]]; then
      if [[ $1 == ?(-) ]]; then
        mkdir -p /dst/info
        printf '%s\n' "${@:3}" >>/dst/info/requirements
      else
        mkdir -p "/img/$1/info"
        printf '%s\n' "${@:3}" >>/img/$1/info/requirements
      fi
    else
      die "Invalid command: image $*"
    fi
  )

  PKG=/pkg
  setup "${@:2}"
  source /pkg/build
  build "${@:2}" 2>&1

  tidy /img/*
  for IMG in /img/*; do
    if [[ -d "$IMG" ]]; then
      mkdir -p "$IMG/info"
      printf '%s\n' "$1" >"$IMG/info/source"
    fi
    if [[ -f "$IMG/info/requirements" ]]; then
      sort -o "$IMG/info/requirements" -u "$IMG/info/requirements"
    fi
  done
  find /img -depth -exec touch -r / {} +
}

if [[ $$ -eq 1 ]]; then
  helper "$@"
else
  action "$@"
fi
