action() {
  unset OUT SRC
  while getopts :o:s: OPTION; do
    case $OPTION in
      o)
        OUT=$OPTARG
        mkdir -p "$OUT"
        ;;
      s)
        SRC=$OPTARG
        mkdir -p "$SRC"
        ;;
      *)
        die "$(< $LIBRARY/help)"
        ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -lt 1 ]]; then
    die "$(< $LIBRARY/help)"
  fi

  PKG=$(locate "$PKGDIR" "$1")
  mkdir -p "$CACHEDIR" "$IMGDIR"

  ROOT=$(mktemp -d "$IMGDIR/root.XXXXXX")
  trap 'rm -f -r --one-file-system "$ROOT"' EXIT
  chmod 0755 "$ROOT"

  sandbox() {
    PKG=$PKG SRC=$SRC pkg sandbox "$ROOT" "$@"
  }

  populate "$ROOT" build
  mkdir -p "$ROOT/pkg"
  mapfile -t REQUIRED < <(sandbox pkg requirements "${PKG##*/}" "${@:2}")
  populate "$ROOT" "${REQUIRED[@]}"

  if [[ -z $SRC ]] || ( set -- "$SRC"/* && [[ $# -eq 0 ]] ); then
    mkdir -p "$ROOT/src" "$ROOT/var/cache"
    sandbox pkg prepare "${PKG##*/}" "${@:2}"
    rmdir "$ROOT/var/cache" "$ROOT/var"
  fi

  mkdir -p "$ROOT/img/${PKG##*/}" "$ROOT/src"
  ln -s "img/${PKG##*/}" "$ROOT/dst"
  sandbox unshare -n pkg build "${PKG##*/}" "${@:2}"

  for IMG in "$ROOT"/img/*; do
    if [[ -e "${OUT:-$IMGDIR}/${IMG##*/}" ]]; then
      echo "Replacing existing image in ${OUT:-$IMGDIR}/${IMG##*/}"
      rm -f -r "${OUT:-$IMGDIR}/${IMG##*/}"
      mv "$IMG" "${OUT:-$IMGDIR}/${IMG##*/}"
    else
      echo "Installing new image in ${OUT:-$IMGDIR}/${IMG##*/}"
      mv "$IMG" "${OUT:-$IMGDIR}/${IMG##*/}"
    fi
  done
}

helper() {
  image() (
    if [[ $2 == contains ]] && [[ $1 != ?(-) ]]; then
      cd /dst && mkdir -p "/img/$1"
      while [[ $# -gt 2 ]]; do
        cp -a -l -t "/img/$1" --parents -- "${3#/dst/}"
        rm -f -r -- "${3#/dst/}"
        set -- "$1" "$2" "${@:4}"
      done
    elif [[ $2 == requires ]] && [[ $# -gt 2 ]]; then
      if [[ $1 == ?(-) ]]; then
        mkdir -p /dst/info
        printf '%s\n' "${@:3}" >>/dst/info/requirements
      else
        mkdir -p "/img/$1/info"
        printf '%s\n' "${@:3}" >>/img/$1/info/requirements
      fi
    else
      die "Invalid command: image $*"
    fi
  )

  PKG=/pkg
  setup "${@:2}"
  source /pkg/build
  build "${@:2}" 2>&1

  tidy /img/*
  for IMG in /img/*; do
    if [[ -d "$IMG" ]]; then
      mkdir -p "$IMG/info"
      printf '%s\n' "$1" >"$IMG/info/source"
    fi
    if [[ -f "$IMG/info/requirements" ]]; then
      sort -o "$IMG/info/requirements" -u "$IMG/info/requirements"
    fi
  done
  find /img -depth -exec touch -r / {} +
}

if [[ $$ -eq 1 ]]; then
  helper "$@"
else
  action "$@"
fi
