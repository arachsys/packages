action() {
  unset FORCE
  while getopts :f OPTION; do
    case $OPTION in
      f)
        FORCE=force
        ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -lt 1 ]]; then
    die "$(< $LIBRARY/help)"
  elif [[ $2 != ?(-) ]] && [[ -e "$2" ]]; then
    die "Cannot unpack sources: $2 already exists"
  fi

  PKG=$(locate "$PKGDIR" "$1")
  mkdir -p "$CACHEDIR" "$IMGDIR"

  ROOT=$(mktemp -d "$IMGDIR/${1##*/}.XXXXXX")
  trap 'rm -f -r --one-file-system "$ROOT"' EXIT
  chmod 0755 "$ROOT"

  sandbox() {
    PKG=$PKG SRC= pkg sandbox "$ROOT" "$@"
  }

  populate "$ROOT" build
  mkdir -p "$ROOT/pkg"
  mapfile -t REQUIRED < <(sandbox pkg requirements "${PKG##*/}" "${@:3}")
  populate "$ROOT" "${REQUIRED[@]}"

  mkdir -p "$ROOT/src" "$ROOT/var/cache"
  sandbox pkg prepare "${PKG##*/}" "${@:3}" $FORCE

  if [[ $2 != ?(-) ]]; then
    mv "$ROOT/src" "$2"
  fi
}

helper() {
  prepare() {
    die "Package does not define prepare()"
  }

  tree() {
    hashtree "${@:2}" | while read HASH; do
      if [[ $# -eq 0 ]]; then
        caller | while read LINE FILE; do
          if sed -E -e "$LINE s/(tree)[ \t]*/\\1 $HASH/" \
                 -i "$FILE" 2>/dev/null; then
            warn "Updated source tree hash at $FILE:$LINE"
          else
            warn "Failed to update source tree hash at $FILE:$LINE"
          fi
        done
      elif [[ ${1@L} != $HASH ]]; then
        caller | while read LINE FILE; do
          if ! enabled force || [[ ${1@L} != +([0-9a-f]) ]]; then
            die "Source tree hash mismatch at $FILE:$LINE"
          elif sed -E -e "$LINE s/(tree)[ \t]+$1/\\1 $HASH/" \
                   -i "$FILE" 2>/dev/null; then
            warn "Updated invalid source tree hash at $FILE:$LINE"
          else
            warn "Failed to update source tree hash at $FILE:$LINE"
          fi
        done
      fi
    done
  }

  if ( set -- /src/* && [[ $# -ne 0 ]] ); then
    die "Cannot unpack sources: directory is not empty"
  fi

  ( setup /pkg "${@:2}" && prepare "${@:2}" )

  find /src -type d -or -type f -or -not -type l -delete \
    -or -lname '/*' -delete -or -xtype l -delete
  chown -f -R 0:0 /src
  chmod -f -R u=rwX,go=rX /src
  find /src -depth -exec touch -h -r / {} +
}

if [[ $$ -eq 1 ]]; then
  helper "$@"
else
  action "$@"
fi
