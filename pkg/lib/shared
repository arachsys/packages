declare -A FEATURES=()
declare -A REQUIREMENTS=()

apply() {
  local DIR OPTARG OPTIND OPTION STRIP=1
  while getopts :d:p: OPTION; do
    case $OPTION in
      d)
        if ! mkdir -p -- "$OPTARG" 2>/dev/null; then
          die "Failed to create directory $OPTARG"
        fi
        DIR=$OPTARG
        ;;
      p)
        if [[ $OPTARG != @(0|[1-9]*([0-9])) ]]; then
          die "Invalid prefix length to strip"
        fi
        STRIP=$OPTARG
        ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -eq 1 ]] && [[ -f $PKG/$1 ]]; then
    set -- "$PKG/$1"
  fi

  if ! fetch "$@" | bsdcat | patch -d "${DIR:-.}" -f -p $STRIP -s \
                               --merge --no-backup-if-mismatch; then
    die "Failed to apply ${1##*/}"
  fi
}

curl() {
  command curl -A pkg/1.0 "$@"
}

die() {
  if [[ $# -gt 0 ]]; then
    printf '%s\n' "$@" >&2
  fi
  exit 1
}

disable() {
  while [[ $# -gt 0 ]]; do
    unset "FEATURES[$1]"
    shift
  done
}

enable() {
  while [[ $# -gt 0 ]]; do
    if [[ $1 == *=* ]]; then
      if [[ ${FEATURES[${1%%=*}]} != ?("${1#*=}") ]]; then
        die "Conflicting type requirements for feature ${1%%=*}"
      fi
      FEATURES[${1%%=*}]=${1#*=}
    elif [[ -z ${FEATURES[$1]+defined} ]]; then
      FEATURES[$1]=
    fi
    shift
  done
}

enabled() {
  while [[ $# -gt 0 ]]; do
    if [[ -z ${FEATURES[${1%%=*}]+defined} ]]; then
      return 1
    elif [[ $1 == *=* ]] && [[ ${FEATURES[${1%%=*}]} != "${1#*=}" ]]; then
      return 1
    fi
    shift
  done
}

feature() {
  if [[ -z ${FEATURES[$1]+defined} ]]; then
    return 1
  elif [[ -n ${FEATURES[$1]} ]]; then
    printf '%s\n' "${FEATURES[$1]}"
  fi
}

fetch() {
  if [[ $# -lt 2 ]]; then
    set -- "${1##*/}" "$1"
  fi

  if [[ -f $2 ]]; then
    cat "$2"
  elif [[ $2 == /* ]]; then
    die "$1 not found"
  elif [[ -d $CACHEDIR && -n $1 ]]; then
    if [[ ! -f $CACHEDIR/$1 ]]; then
      echo "Downloading $1 from $2:" >&2
      if ! curl -f -o "$CACHEDIR/$1.part" -C - -L "$2"; then
        die "Failed to fetch $2"
      fi
      mv "$CACHEDIR/$1.part" "$CACHEDIR/$1"
    fi
    cat "$CACHEDIR/$1"
  elif ! curl -f -L "$2"; then
    die "Failed to fetch $2"
  fi
}

hashtree() {
  set -- . -mindepth 1 "$@"
  local ARG; for (( ARG = 4; ARG <= $#; ARG += 4 )); do
    set -- "${@:1:ARG - 1}" -path "./${!ARG}" -prune -or "${@:ARG + 1}"
  done

  { find "$@" -type d -or -type f -not -perm /ug+s \
      -or -type f -printf "$PWD/%P is a setuid/setgid binary\\n" \
      -or -not -type l -printf "$PWD/%P is a special file\\n" \
      -or -lname '/*' -printf "$PWD/%P -> %l is an absolute symlink\\n" \
      -or -xtype l -printf "$PWD/%P -> %l is a dangling symlink\\n"
  } | [[ -z $(tee /dev/stderr) ]]

  { find "$@" -type d -printf "%P\0" | LC_ALL=C sort -z
    printf '\0'
    find "$@" -type l -printf "%P\0%l\0" | LC_ALL=C sort -z
    printf '\0'
    find "$@" -type f -executable -printf "%P\0" | LC_ALL=C sort -z \
      | xargs -0 b2sum -l 256 -z | cut -b 1-65,67- -z
    printf '\0'
    find "$@" -type f -not -executable -printf "%P\0" | LC_ALL=C sort -z \
      | xargs -0 b2sum -l 256 -z | cut -b 1-65,67- -z
    printf '\0'
  } | b2sum -l 256 | cut -b 1-64
}

locate() {
  if [[ $2 == ?(.|..)/* ]] && [[ -f $2/build ]]; then
    printf '%s\n' "${2%%*(/)}"
  elif [[ $2 != ?(.|..)/* ]] && [[ -f $1/$2/build ]]; then
    printf '%s\n' "$1/${2%%*(/)}"
  else
    die "Package ${2%%*(/)} not found"
  fi
}

maybe() {
  [[ ${@:$#} == "--" ]] || "$@"
}

mode() {
  if [[ -f $LIBRARY/modes/$1 ]]; then
    source "$LIBRARY/modes/$1"
  else
    die "Unrecognised build mode: $1"
  fi
}

populate() {
  mkdir -m 0755 -p "$1"/{bin,dev,etc,lib,proc,run}
  mkdir -m 1777 -p "$1"/{run/shm,tmp}
  cp -n -t "$1/etc" -L -R /etc/{protocols,resolv.conf,services,ssl} \
    "$LIBRARY/skel/passwd" "$LIBRARY/skel/group"
  resolve "${@:2}" | while read IMG; do
    maybe cp -a -l -t "$1" -- "$IMGDIR/$IMG"/!(info)
  done
}

require() {
  while [[ $# -gt 0 ]]; do
    REQUIREMENTS[$1]=1
    shift
  done
}

resolve() {
  declare -A IMAGES=()
  while [[ $# -gt 0 ]]; do
    declare -a REQUIRED=()
    if [[ -n $1 ]] && ! let "IMAGES[$1]++"; then
      if [[ -f $IMGDIR/$1 ]]; then
        mapfile -t REQUIRED < "$IMGDIR/$1"
      elif [[ -d $IMGDIR/$1 ]]; then
        printf '%s\n' "$1"
        if [[ -f $IMGDIR/$1/info/requirements ]]; then
          mapfile -t REQUIRED < "$IMGDIR/$1/info/requirements"
        fi
      else
        die "Required image $1 not found in $IMGDIR"
      fi
    fi
    set -- "${REQUIRED[@]}" "${@:2}"
  done
}

setup() {
  set -o allexport
  unset CFLAGS LDFLAGS
  CHOST=$(cc -dumpmachine)
  MAKEFLAGS=-j$((1 + $(nproc)))
  set +o allexport

  PKG=$1 && shift
  while [[ $# -gt 0 ]]; do
    if [[ $1 == no-* ]]; then
      disable "${1#no-}"
    else
      enable "$1"
    fi
    shift
  done

  source "$PKG/build"
}

unpack() {
  local DIR OPTARG OPTIND OPTION STRIP=1
  while getopts :d:p: OPTION; do
    case $OPTION in
      d)
        if ! mkdir -p -- "$OPTARG" 2>/dev/null; then
          die "Failed to create directory $OPTARG"
        fi
        DIR=$OPTARG
        ;;
      p)
        if [[ $OPTARG != @(0|[1-9]*([0-9])) ]]; then
          die "Invalid prefix length to strip"
        fi
        STRIP=$OPTARG
        ;;
    esac
  done
  shift $((OPTIND - 1))

  if [[ $# -eq 1 ]] && [[ -f $PKG/$1 ]]; then
    set -- "$PKG/$1"
  fi

  if fetch "$@" | tar -x -f - -C "${DIR:-.}" --no-same-owner \
                    --no-same-permissions --strip-components=$STRIP; then
    chmod -R u=rwX,go=rX "${DIR:-.}"
  else
    die "Failed to unpack ${1##*/}"
  fi
}

warn() {
  if [[ $# -gt 0 ]]; then
    printf '%s\n' "$@" >&2
  fi
}
