diff --git a/attach.c b/attach.c
index e485735..059b510 100644
--- a/attach.c
+++ b/attach.c
@@ -217,7 +217,7 @@ attach_main(int noerror)
 		/* Pty activity */
 		if (n > 0 && FD_ISSET(s, &readfds))
 		{
-			int len = read(s, buf, sizeof(buf));
+			ssize_t len = read(s, buf, sizeof(buf));
 
 			if (len == 0)
 			{
@@ -237,12 +237,16 @@ attach_main(int noerror)
 		/* stdin activity */
 		if (n > 0 && FD_ISSET(0, &readfds))
 		{
+			ssize_t len;
+
 			pkt.type = MSG_PUSH;
 			memset(pkt.u.buf, 0, sizeof(pkt.u.buf));
-			pkt.len = read(0, pkt.u.buf, sizeof(pkt.u.buf));
+			len = read(0, pkt.u.buf, sizeof(pkt.u.buf));
 
-			if (pkt.len <= 0)
+			if (len <= 0)
 				exit(1);
+
+			pkt.len = len;
 			process_kbd(s, &pkt);
 			n--;
 		}
diff --git a/master.c b/master.c
index 88b85f5..e0351bd 100644
--- a/master.c
+++ b/master.c
@@ -220,7 +220,7 @@ static void
 pty_activity(int s)
 {
 	unsigned char buf[BUFSIZE];
-	int len;
+	ssize_t len;
 	struct client *p;
 	fd_set readfds, writefds;
 	int highest_fd, nclients;
@@ -268,7 +268,7 @@ top:
 	/* Send the data out to the clients. */
 	for (p = clients, nclients = 0; p; p = p->next)
 	{
-		int written;
+		ssize_t written;
 
 		if (!FD_ISSET(p->fd, &writefds))
 			continue;
@@ -276,7 +276,7 @@ top:
 		written = 0;
 		while (written < len)
 		{
-			int n = write(p->fd, buf + written, len - written);
+			ssize_t n = write(p->fd, buf + written, len - written);
 
 			if (n > 0)
 			{
@@ -330,7 +330,7 @@ control_activity(int s)
 static void
 client_activity(struct client *p)
 {
-	int len;
+	ssize_t len;
 	struct packet pkt;
 
 	/* Read the activity. */
@@ -351,7 +351,10 @@ client_activity(struct client *p)
 
 	/* Push out data to the program. */
 	if (pkt.type == MSG_PUSH)
-		write(the_pty.fd, pkt.u.buf, pkt.len);
+	{
+		if (pkt.len <= sizeof(pkt.u.buf))
+			write(the_pty.fd, pkt.u.buf, pkt.len);
+	}
 
 	/* Attach or detach from the program. */
 	else if (pkt.type == MSG_ATTACH)
@@ -565,7 +568,7 @@ master_main(char **argv, int waitattach)
 	if (fd[0] != -1)
 	{
 		char buf[1024];
-		int len;
+		ssize_t len;
 
 		close(fd[1]);
 		len = read(fd[0], buf, sizeof(buf));
