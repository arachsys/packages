diff --git a/Makefile b/Makefile
index 282bea9..897e686 100644
--- a/Makefile
+++ b/Makefile
@@ -67,7 +67,7 @@ TARFILES := AUTHORS BUGS NEWS README TODO COPYING COPYING.LIB \
 # plus the top-level Makefile to make it work stand-alone.
 _TARFILES := Makefile
 
-CURSES := -lncurses
+CURSES := -lncursesw
 
 # This seems about right for the dynamic library stuff.
 # Something like this is probably needed to make the SE Linux
diff --git a/watch.c b/watch.c
index 5841168..e25feff 100644
--- a/watch.c
+++ b/watch.c
@@ -25,6 +25,8 @@
 #include <termios.h>
 #include <locale.h>
 #include "proc/procps.h"
+#include <wchar.h>
+#include <wctype.h>
 
 #ifdef FORCE_8BIT
 #undef isprint
@@ -134,6 +136,27 @@ get_terminal_size(void)
 	}
 }
 
+static wint_t
+readwc(FILE *stream, mbstate_t *mbs)
+{
+	for (;;) {
+		int chr;
+		char c;
+		wchar_t wc;
+		size_t len;
+
+		chr = getc(stream);
+		if (chr == EOF)
+			return WEOF;
+		c = chr;
+		len = mbrtowc(&wc, &c, 1, mbs);
+		if (len == (size_t)-1)
+			memset(mbs, 0, sizeof(*mbs));
+		else if (len != (size_t)-2)
+			return wc;
+	}
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -239,6 +262,7 @@ main(int argc, char *argv[])
 		FILE *p;
 		int x, y;
 		int oldeolseen = 1;
+		mbstate_t mbs;
 
 		if (screen_size_changed) {
 			get_terminal_size();
@@ -266,49 +290,65 @@ main(int argc, char *argv[])
 			do_exit(2);
 		}
 
+		memset(&mbs, 0, sizeof(mbs));
 		for (y = show_title; y < height; y++) {
 			int eolseen = 0, tabpending = 0;
 			for (x = 0; x < width; x++) {
-				int c = ' ';
-				int attr = 0;
+				wint_t c = L' ';
+				int attr = 0, c_width;
+				cchar_t cc;
+				wchar_t wstr[2];
 
 				if (!eolseen) {
 					/* if there is a tab pending, just spit spaces until the
 					   next stop instead of reading characters */
 					if (!tabpending)
 						do
-							c = getc(p);
-						while (c != EOF && !isprint(c)
-						       && c != '\n'
-						       && c != '\t');
-					if (c == '\n')
+							c = readwc(p, &mbs);
+						while (c != WEOF && !iswprint(c)
+						       && c != L'\n'
+						       && c != L'\t');
+					if (c == L'\n')
 						if (!oldeolseen && x == 0) {
 							x = -1;
 							continue;
 						} else
 							eolseen = 1;
-					else if (c == '\t')
+					else if (c == L'\t')
 						tabpending = 1;
-					if (c == EOF || c == '\n' || c == '\t')
-						c = ' ';
+					if (c == WEOF || c == L'\n' || c == L'\t')
+						c = L' ';
 					if (tabpending && (((x + 1) % 8) == 0))
 						tabpending = 0;
 				}
+				wstr[0] = c;
+				wstr[1] = 0;
+				setcchar (&cc, wstr, 0, 0, NULL);
 				move(y, x);
 				if (option_differences) {
-					chtype oldch = inch();
-					char oldc = oldch & A_CHARTEXT;
+					cchar_t oldc;
+					wchar_t oldwstr[2];
+					attr_t attrs;
+					short colors;
+
+					in_wch(&oldc);
+					getcchar(&oldc, oldwstr, &attrs, &colors, NULL);
 					attr = !first_screen
-					    && ((char)c != oldc
+					    && (wstr[0] != oldwstr[0]
 						||
 						(option_differences_cumulative
-						 && (oldch & A_ATTRIBUTES)));
+						 && attrs));
 				}
 				if (attr)
 					standout();
-				addch(c);
+				add_wch(&cc);
+
 				if (attr)
 					standend();
+				c_width = wcwidth(c);
+				if (c_width > 1)
+					x += c_width - 1;
+
 			}
 			oldeolseen = eolseen;
 		}
