diff --git a/login-utils/sulogin.c b/login-utils/sulogin.c
index 45a558d..3ac3daa 100644
--- a/login-utils/sulogin.c
+++ b/login-utils/sulogin.c
@@ -68,6 +68,8 @@
 #include "sulogin-consoles.h"
 #define CONMAX		16
 
+#define EXIT_TIMEOUT 142
+
 static unsigned int timeout;
 static int profile;
 static volatile uint32_t openfd;		/* Remember higher file descriptors */
@@ -78,7 +80,7 @@ static struct sigaction saved_sigquit;
 static struct sigaction saved_sighup;
 static struct sigaction saved_sigchld;
 
-static volatile sig_atomic_t alarm_rised;
+static volatile sig_atomic_t alarm_raised;
 static volatile sig_atomic_t sigchild;
 
 #define SULOGIN_PASSWORD_BUFSIZ	128
@@ -342,7 +344,7 @@ static void tcfinal(struct console *con)
 static void alrm_handler(int sig __attribute__((unused)))
 {
 	/* Timeout expired */
-	alarm_rised = 1;
+	alarm_raised = 1;
 }
 
 static void chld_handler(int sig __attribute__((unused)))
@@ -585,18 +587,10 @@ static void doprompt(const char *crypted, struct console *con, int deny)
 				     "See sulogin(8) man page for more details.\n\n"
 				     "Press Enter to continue.\n"));
 	else {
-#if defined(USE_ONELINE)
 		if (crypted[0] && !locked_account_password(crypted))
-			fprintf(con->file, _("Give root password for login: "));
+			fprintf(con->file, _("Give root password for maintenance: "));
 		else
-			fprintf(con->file, _("Press Enter for login: "));
-#else
-		if (crypted[0] && !locked_account_password(crypted))
-			fprintf(con->file, _("Give root password for maintenance\n"));
-		else
-			fprintf(con->file, _("Press Enter for maintenance\n"));
-		fprintf(con->file, _("(or press Control-D to continue): "));
-#endif
+			fprintf(con->file, _("Press Enter for maintenance: "));
 	}
 	fflush(con->file);
 err:
@@ -704,7 +698,7 @@ static char *getpasswd(struct console *con)
 
 		if (read(fd, &c, 1) < 1) {
 			if (errno == EINTR || errno == EAGAIN) {
-				if (alarm_rised) {
+				if (alarm_raised) {
 					ret = NULL;
 					goto quit;
 				}
@@ -897,11 +891,11 @@ int main(int argc, char **argv)
 	struct console *con;
 	char *tty = NULL;
 	struct passwd *pwd;
-	const struct timespec sigwait = { .tv_sec = 0, .tv_nsec = 50000000 };
 	siginfo_t status = { 0 };
 	sigset_t set;
 	int c, reconnect = 0;
 	int opt_e = 0;
+	int result = EXIT_TIMEOUT;
 	int wait = 0;
 	pid_t pid;
 
@@ -1100,14 +1094,13 @@ int main(int argc, char **argv)
 				}
 				fprintf(stderr, _("Login incorrect\n\n"));
 			}
-			if (alarm_rised) {
+			if (alarm_raised) {
 				tcfinal(con);
-				warnx(_("Timed out\n\n"));
 			}
 			/*
 			 * User pressed Control-D.
 			 */
-			exit(0);
+			exit(EXIT_TIMEOUT);
 		case -1:
 			warn(_("fork failed"));
 			/* fallthrough */
@@ -1145,9 +1138,11 @@ int main(int argc, char **argv)
 			continue;
 		if (con->pid < 0)
 			continue;
-		if (con->pid == status.si_pid)
+		if (con->pid == status.si_pid) {
+			if (WIFEXITED(status.si_status))
+				result = WEXITSTATUS(status.si_status);
 			con->pid = -1;
-		else {
+		} else {
 			kill(con->pid, SIGTERM);
 			wait++;
 		}
@@ -1157,22 +1152,18 @@ int main(int argc, char **argv)
 	sigaddset(&set, SIGCHLD);
 
 	do {
-		int signum, ret;
+		int ret;
 
 		if (!wait)
 			break;
 
 		status.si_pid = 0;
-		ret = waitid(P_ALL, 0, &status, WEXITED|WNOHANG);
+		ret = waitid(P_ALL, 0, &status, WEXITED);
 
 		if (ret < 0) {
 			if (errno == ECHILD)
 				break;
-			if (errno == EINTR)
-				continue;
-		}
-
-		if (!ret && status.si_pid > 0) {
+		} else if (status.si_pid > 0) {
 			list_for_each(ptr, &consoles) {
 				con = list_entry(ptr, struct console, entry);
 
@@ -1181,19 +1172,16 @@ int main(int argc, char **argv)
 				if (con->pid < 0)
 					continue;
 				if (con->pid == status.si_pid) {
+					if (WIFEXITED(status.si_status) &&
+					    WEXITSTATUS(status.si_status) != EXIT_TIMEOUT)
+						result = WEXITSTATUS(status.si_status);
 					con->pid = -1;
 					wait--;
 				}
 			}
-			continue;
 		}
-
-		signum = sigtimedwait(&set, NULL, &sigwait);
-		if (signum != SIGCHLD && signum < 0 && errno == EAGAIN)
-			break;
-
 	} while (1);
 
 	mask_signal(SIGCHLD, SIG_DFL, NULL);
-	return EXIT_SUCCESS;
+	return result;
 }
